import { PolymerElement, html } from '/node_modules/@polymer/polymer/polymer-element.js';
// import '/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import {Dazzle} from '/node_modules/@dazzle/dz-dazzle/dz-library.js';

class dzElm extends PolymerElement {
  static get properties () {
    return {
        like: {
            "type": Number
        },
        id: {
            "type": Number
        },
        status: {
            "type": Boolean
        },
        "liked": {
            "type": Number
        }
       
    };
  }

  constructor() {
    super();
    this.like = 0;
    this.user = store.get('change-user') || null;
    if (this.user) 
        this.fileManager = new AwsPackage(this.user);
    
    this.userManager = new DataPackage('_user');
    this.prodManager = new DataPackage('product');

  }
  ready() {
      super.ready();
      this.id = this.getAttribute('id');
      let that = this;
      let shadow = this.shadowRoot;


      this.prodManager.getDataByCache(this.id).then(res=>{
        this.product = res;
        this.like = this.product['like'] || 0;
        
  });

      let user2 = store.get('change-user') || null;
      if (user2)
        this.userManager.getDataByCache(user2['id']).then(res=>{
            that.user = res;      
            that.checkLike();
        });


}

checkLike() {
    let user = this.user;
    let shadow= this.shadowRoot;
    let indexOf;
    let id = this.user['id'];

    try{
        indexOf = this.product['likeUser'].indexOf(id);

    } catch(e){
        indexOf = -1;
        this.product['likeUser'] =[];     
    }
    this.user = user;
    console.log('Like Product Array',user,this.product['likeUser'],indexOf,this.id);


    if (indexOf>=0){
        shadow.querySelector('#toggle-heart').checked = true;
        this.checked = true;
    }
    else {
        shadow.querySelector('#toggle-heart').checked = false;
        this.checked = false;
    }

    this.indexOf = indexOf;

    if (shadow.querySelector('#toggle-heart').checked)
        shadow.querySelector('.like-img').setAttribute('src', '/img/symbol/like-outlined-selected.png');
    else
        shadow.querySelector('.like-img').setAttribute('src', '/img/symbol/like-outlined.png');


}

checklogin() {
    console.log('Check Login');
    let user = store.get('change-user') || null;

    if (!user)
        alert('請先登入');

    else 
        this.addCount();    
}



addFavorProduct(){
    try {
        let indexOf = this.user['likeProduct'].indexOf(this.id);
        let id = this.id;
        if (indexOf<0) {
            this.user['likeProduct'].push(id);
            this.userManager.saveDataWithCache(this.user['id'],this.user);
        }
    } catch(e){
        return;
    }
}

removeFavorProduct(){
    try {
        let indexOf = this.user['likeProduct'].indexOf(this.id);
        if (indexOf>-1) {
            this.user['likeProduct'].splice(indexOf,1);
            this.userManager.saveDataWithCache(this.user['id'],this.user);
        }
    } catch(e){
        return;
    }
}

addCount() {

    let that = this;
    let shadow = this.shadowRoot;

    let user = this.user;
    let like = that.like;
    let indexOf = this.indexOf;
 
    if (shadow.querySelector('#toggle-heart').checked != true) {
        this.like--;
        
        if (indexOf>-1)
            this.product['likeUser'].splice(indexOf,1);            
        
        this.checkLike();
        this.removeFavorProduct();
    } else {

        this.like++;
        if (indexOf == -1)
            this.product['likeUser'].push(this.user['id']);
        this.checkLike();
        this.addFavorProduct();
    }

    this.product['like'] = this.like;
    this.prodManager.saveDataWithCache(this.id,this.product);
    console.log('My Product',this.product);
    console.log('My User',this.user);
}

  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <style>
            #toggle-heart {
                position: absolute;
                left: -100vw;
            }

            [for=toggle-heart] {}

            .like-img {
                width: 20px;
                height: 20px;
                background-size: contain;
                background-repeat: no-repeat;
                background-size: contain;
                cursor: pointer;
                border: none;
                background-color: transparent;
                color: transparent;
                margin-top: 10px;
                margin-right: 10px;
                margin-bottom: -2px;
            }

            [id="toggle-heart"]:checked+label {
                /* background-color: red; */
            }
        </style>
        <style include="icon-styles"></style>
        <div id="container">
            <input on-click="checklogin" id="toggle-heart" type="checkbox" />
            <label for="toggle-heart">
                <img src="/img/symbol/like-outlined.png" class="like-img">
                <span id="likes">{{like}}</span>
            </label>

        </div>
    `;
  }
}

// Register the element with the browser.
customElements.define('change-like', dzElm);

