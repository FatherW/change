import { PolymerElement, html } from '/node_modules/@polymer/polymer/polymer-element.js';
import '/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import { Dazzle } from '/node_modules/@dazzle/dz-dazzle/dz-library.js';
import "https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.js";
import "/backend7.0/fieldRenderer.js";

class changegridnew extends PolymerElement {
    static get properties() {
        return {
            key: {
                "type": String
            },
            updateAll: {
                "type": Boolean
            },
            tables: {
                "type": Array
            },
            myData: {
                "type": Array
            },
            updateRows: {
                "type": Array
            },
            selectedRows: {
                "type": Array
            },
        };
    }

    constructor() {
        super();
        const template = Dazzle.tid;
        const uid = Dazzle.uid;
        const id = this.getAttribute('id') || '_default';
        const user = Dazzle.user;
        const editMode = Dazzle.editMode || 'normal';
        this.key = "_id";
        this.updateAll = false;
        let allow_menu = [];
        this.tables = null; //document.querySelector('myTable');
        console.log("Grid", window);
        let that = this;
        this.myData = null;
        this.updateRows = [];
        document.dispatchEvent(new CustomEvent('allow-menu', { detail: { 'component': that.tagName, 'menu': allow_menu } }));

        this.selectedRows = [];

    }
    ready() {
        super.ready();
        console.log("Grid Running Entered.");
        this.initGrid();
        this.updateTable();
        this.initButton();
    }
    initGrid() {
        let that = this;
        console.log('Grid My Data', this.myData);
        var rowData = [];
        var columnDefs = [];
        console.log('Grid Column', columnDefs);
        var key = this.key || '_id';
        console.log('Grid Key', columnDefs, rowData);
        var gridOptions = {
            defaultColDef: { editable: true },
            columnDefs: columnDefs,
            rowData: rowData,
            singleClickEdit: true,
            rowSelection: 'multiple',
            enableColResize: true,
            enableSorting: true,
            rowMultiSelectWithClick: true,
            onSelectionChanged: onSelectionChanged,
            onCellValueChanged: function(params) {
                var changedData = [params.data];
                var row = params.data;
                console.log("Grid", changedData);
                that.update(params.data);
            },
            onGridReady: function(event) {
                event.api.sizeColumnsToFit();
            }
        };
        this.gridOptions = gridOptions;

        function onSelectionChanged() {
            that.selectedRows = gridOptions.api.getSelectedRows();
            console.log("Grid", this.selectedRows);
        }
    }

    updateTable() {
        let select_item;
        let that = this;
        let selectBox = document.querySelector('smart-combo-box');
        console.log("Grid", selectBox);
        let dataSource = [];
        this.tables.forEach(item => {
            dataSource.push({
                'label': item.table,
                'value': item
            });
        });
        selectBox.dataSource = dataSource;
        selectBox.addEventListener('change', function(event) {
            console.log('Grid E', event, selectBox.selectedValues[0]);

            // New to change to our dz-loader dataPackage
            that.myData = new DataPackage(selectBox.value);
            //


            that.myData.getGridColumns().then(colDef => {
                that.myData.getAllData().then(data => {
                    that.gridOptions.api.setColumnDefs(colDef);
                    that.gridOptions.api.setRowData(data);
                    that.gridOptions.api.refreshView();
                });
            });
        });
        if (this.tables.length) {
            this.myData.getGridColumns().then(colDef => {
                this.myData.getAllData().then(data => {
                    let agGrid = window['agGrid'];
                    var gridDiv = document.querySelector('#myGrid');
                    new agGrid.Grid(gridDiv, that.gridOptions);
                    that.gridOptions.api.setColumnDefs(colDef);
                    that.gridOptions.api.setRowData(data);
                    that.gridOptions.api.refreshView();
                });
            });
        }
    }

    initButton() {
        let that = this;
        let editMode = Dazzle.editMode || 'normal';
        let toolbar = this.querySelector('#toolbar-button');
        let button = document.createElement('smart-button');
        button.setAttribute('class', 'raised');
        let newButton1, newButton2, newButton3, newButton4, newButton5, newButton6;
        newButton1 = button.cloneNode(true);
        newButton1.innerHTML = '儲存'
        newButton1.addEventListener('click', e => {
            that.save();
        });
        toolbar.appendChild(newButton1);
        newButton2 = button.cloneNode(true);
        newButton2.innerHTML = '刷新'
        newButton2.addEventListener('click', e => {
            that.refresh();
        });
        toolbar.appendChild(newButton2);
        newButton3 = button.cloneNode(true);
        newButton3.innerHTML = '新增'
        newButton3.addEventListener('click', e => {
            let newObject = {};
            let id = new Date().getTime();
            newObject["_id"] = id;
            that.gridOptions.api.updateRowData({ add: [newObject], addIndex: 0 });
            that.gridOptions.api.refreshInMemoryRowModel();
        });
        toolbar.appendChild(newButton3);
        newButton4 = button.cloneNode(true);
        newButton4.innerHTML = '刪除'
        newButton4.addEventListener('click', e => {
            that.delete();
        });
        toolbar.appendChild(newButton4);
        newButton5 = button.cloneNode(true);
        newButton5.innerHTML = '開新資料表';
        newButton5.addEventListener('click', e => {
            that.createTable();
        });
        toolbar.appendChild(newButton5);
        newButton5 = button.cloneNode(true);
        newButton5.innerHTML = '編輯資料格式';
        newButton5.addEventListener('click', e => {

            document.dispatchEvent(new CustomEvent('custom-popup', { detail: { 'component': 'dz-schema-management', 'size': 'big', 'myData': this.myData } }));

        });
        toolbar.appendChild(newButton5);
        newButton6 = button.cloneNode(true);
        newButton6.innerHTML = '匯入';
        newButton6.addEventListener('click', e => {
            const user = Dazzle.user;
            let fileManager = new AwsPackage(user);
            fileManager.getFile('files/book.json').then(result => {
                console.log('Result', result);
                that.updateAll = true;
                that.gridOptions.api.setRowData(JSON.parse(result));
                that.gridOptions.api.refreshView();
            });
        });
        toolbar.appendChild(newButton6);
    }

    createTable() {
        let table = prompt("請輸入新增資料表名稱");
        // Need to change to new version
        let myTable = new DataPackage(table);
        let _info = new DataPackage("_info");
        // ////


        myTable.createIndex(table);
        _info.saveData(table, {
            "name": table,
            "schema": []
        });
    }

    add() {
        let that = this;
        let newObject = {};
        let id = new Date().getTime();
        newObject['_id'] = id;
        this.gridOptions.api.updateRowData({ add: [newObject], addIndex: 0 });
    }

    update(data) {
        console.log('Grid Update');
        this.gridOptions.api.updateRowData({ update: [data] });
        this.gridOptions.api.refreshInMemoryRowModel();
        this.gridOptions.api.getModel().rowsToDisplay[0].edited = true;
        this.updateRows.push(data);
    }

    save() {
        let that = this;
        if (this.updateAll) {
            console.log('Update All');
            this.gridOptions.api.forEachNode(function(rowNode, index) {
                let item = rowNode.data;
                console.log('node ' + rowNode.data + ' is in the grid');
                that.myData.updateData(item['_id'], item);

            });
        } else {
            this.updateRows.forEach(item => {
                console.log('Update Item', item);
                that.myData.updateData(item['_id'], item);
            });
            this.updateRows = [];
            this.refresh();
            alert('成功儲存');
        }
    }

    delete() {
        let that = this;
        var nodes = this.gridOptions.api.getSelectedNodes();
        for (var i = 0; i < nodes.length; i++) {
            nodes[i].deleted = true;
        }
        that.selectedRows.forEach(item => {
            that.myData.removeData(item[this.key]);
        });
        this.gridOptions.api.onFilterChanged();
        that.refresh();
    }

    refresh() {
        console.log('Refresh');
        let that = this;
        this.myData.getGridColumns().then(colDef => {
            that.myData.getAllData().then(data => {
                that.gridOptions.api.setColumnDefs(colDef);
                that.gridOptions.api.setRowData(data);
                that.gridOptions.api.refreshView();
            });
        });
    }

    importJson() {
        let that = this;
        getContent('https://www.hkfspa.org/json/member.json').then(result => {
            console.log(result);
            var json = JSON.parse(result);
            that.gridOptions.api.updateRowData({ add: json, addIndex: 0 });
            that.myData.bulkUpdateData(json);
            that.updateAll = true;
            // that.refresh();
        });
    }

    importExcel() {
        let that = this;
        this.makeRequest('GET',
            'https://www.ag-grid.com/example-excel-import/OlymicData.xlsx',
            // success
            function(data) {
                var workbook = convertDataToWorkbook(data);

                that.populateGrid(workbook);
            },
            // error
            function(error) {
                throw error;
            }
        );
    }

    makeRequest() {
        var httpRequest = new XMLHttpRequest();
        httpRequest.open("GET", url, true);
        httpRequest.responseType = "arraybuffer";

        httpRequest.open(method, url);
        httpRequest.onload = function() {
            success(httpRequest.response);
        };
        httpRequest.onerror = function() {
            error(httpRequest.response);
        };
        httpRequest.send();
    }

    populateGrid(workbook) {
        var firstSheetName = workbook.SheetNames[0];
        var worksheet = workbook.Sheets[firstSheetName];
        var columns = {
            'A': '中文姓名',
            'B': '英文姓名',
            'C': '有效期',
            'D': '協會認可資格',
            'E': '類別'
        };
        var rowData = [];
        var rowIndex = 2;
        while (worksheet['A' + rowIndex]) {
            var row = {};
            Object.keys(columns).forEach(function(column) {
                row[columns[column]] = worksheet[column + rowIndex].w;
            });

            rowData.push(row);

            rowIndex++;
        }
        gridOptions.api.setRowData(rowData);
    }

    renew() {
        let that = this;
        console.log('My Data', this.myData);
        var rowData = this.myData.data || [];
        var columnDefs = this.columns || [];
        console.log('Column', columnDefs);
        var key = this.key || '_id';
        console.log('Key', columnDefs, rowData);
        var gridOptions = {
            defaultColDef: { editable: true },
            columnDefs: columnDefs,
            rowData: rowData,
            singleClickEdit: true,
            rowSelection: 'multiple',
            onSelectionChanged: onSelectionChanged,
            //  components: {
            //      'dateRenderer': DateRenderer,
            //      'dateEditor':DateEditor,
            //      'fileRenderer':FileRenderer
            //},
            onCellValueChanged: function(params) {
                var changedData = [params.data];
                var row = params.data;
                console.log(changedData);
                //            that.curTarget.updateData(row[key],row);
                that.update(params.data);
                //            params.api.updateRowData({update: changedData});
            },
            onGridReady: function(event) {
                event.api.sizeColumnsToFit();
            }
        };
        this.gridOptions = gridOptions;

        function onSelectionChanged() {
            that.selectedRows = gridOptions.api.getSelectedRows();
            console.log(this.selectedRows);
        }
        let agGrid = window['agGrid'];
        var gridDiv = document.querySelector('#myGrid');
        new agGrid.Grid(gridDiv, gridOptions);
    }

    constructColumns() {
        console.log(this.myData);
        let fields = this.myData.schema.field;
        let default_col = {
            'sortable': true,
            'filter': true
        }
        this.columns = [];
        this.key = '_id';
        fields.forEach(item => {
            console.log('Items', item);

            let label = item['label'] || item['field'];
            default_col = {

                'field': item['field'],
                'headerName': label,
                'sortable': true,
                'filter': true
            }
            switch (item['type']) {
                case 'key':
                    this.key = item['field'];
                    default_col['hide'] = true;
                    break;

                case 'date':
                    default_col['cellRenderer'] = window['DateRenderer'];
                    default_col['cellEditor'] = window['DateEditor'];
                    break;

                case 'file':
                    default_col['cellRenderer'] = window['FileRenderer'];
                    break;

                case 'image':
                    default_col['cellRenderer'] = window['ImageRenderer'];
                    break;
            }

            this.columns.push(default_col);

        });
    }

    generateDataSource(items) {
        const basePath = 'images/';
        dataSource = [];
        for (let i = 0; i < items; i++) {
            const item = {
                image: `images/slide-${i + 1}.jpg`,
                label: '',
                content: ''
            };
            dataSource.push(item);
        }
        return dataSource;
    }

    UrlExists(url) {
        var http = new XMLHttpRequest();
        http.open('HEAD', url, false);
        http.send();
        return http.status != 404;
    }

    timeConverter(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);
        var months = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
        var year = a.getFullYear();
        var month = months[a.getMonth()];
        var date = a.getDate();
        var hour = a.getHours();
        var min = a.getMinutes();
        var sec = a.getSeconds();
        var time = date + '/' + month + '/' + year;
        return time;
    }

    static get template() {
        // Template getter must return an instance of HTMLTemplateElement.
        // The html helper function makes this easy.
        return html `
        <style>
        .mat-dialog-title {
            font: 500 20px/32px Roboto,"Helvetica Neue",sans-serif;
        }
        .mat-dialog-title {
            margin: 0 0 20px;
            display: block;
        }

        .mat-toolbar.mat-primary {
            background: #3f51b5;
            color: #fff;
        }

        .mat-toolbar-row, .mat-toolbar-single-row {
            height: 64px;
        }
        .mat-toolbar-row, .mat-toolbar-single-row {
            display: flex;
            box-sizing: border-box;
            padding: 0 16px;
            width: 100%;
            flex-direction: row;
            align-items: center;
            white-space: nowrap;
        }
        .example-spacer {
            -webkit-box-flex: 1;
            flex: 1 1 auto;
        }

        .mat-raised-button:not([class*=mat-elevation-z]) {
            box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);
        }

        .mat-fab.mat-primary, .mat-flat-button.mat-primary, .mat-mini-fab.mat-primary, .mat-raised-button.mat-primary {
            background-color: #3f51b5;
        }

        .mat-fab.mat-warn, .mat-flat-button.mat-warn, .mat-mini-fab.mat-warn, .mat-raised-button.mat-warn {
            background-color: #f44336;
        }

          smart-cards {
            min-height: 100vh;
            display:block;
        }
        smart-card{
            max-height:400px;
        }
        .card-buttons{
            bottom:10px;
        }
        smart-button[active]{
            color:white;
        }
        smart-card.expandable-card {
            background-color: white;
        }

        smart-card.expandable-card .card-image {
            position: relative;
        }

        smart-card.expandable-card .card-image img {
            width: 100%;
            border-radius: 2px 2px 0px 0px;
        }

        smart-card.expandable-card .card-image .card-title {
            position: absolute;
            bottom: 0px;
            left: 0px;
            color: white;
            font-size: 30px;
            background-color: #00000087;
            padding: 20px;
        }

        smart-card.expandable-card .card-content, smart-card.expandable-card .card-comment, smart-card.expandable-card .card-action {
            -webkit-box-sizing: border-box;
            box-sizing: border-box;
            padding: 20px;
        }
        smart-card[selected] {
            border: 5px rgb(0,92,153) solid;
        }

        smart-card.expandable-card .card-comment {
            font-style: italic;
            font-size: 0.9em;
        }

        smart-card.expandable-card .card-action {
            -webkit-box-sizing: border-box;
            box-sizing: border-box;
            padding: 20px;
            border-top: 1px solid rgba(160,160,160,0.2);
            border-radius: 0px 0px 2px 2px;
        }

        smart-card.expandable-card smart-accordion {
            width: 100%;
            height: auto;
        }

        smart-card.expandable-card smart-accordion-item > .smart-container {
            border-bottom-width: 0px;
        }

        smart-card.expandable-card smart-accordion-item p {
            border-bottom: 1px solid lightgray;
            padding: 5px;
            margin: 2px;
            color: gray;
        }

        smart-card.expandable-card .card-buttons {
            position: absolute;
            padding: 0px 20px 20px 0px;
            margin-top:20px;
        }

        smart-card.expandable-card .card-content.hidden {
            display: none;
        }

        smart-card smart-toggle-button {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            font-size: 16px;
            background-color: lightgray;
            position: absolute;
            right: 20px;
            top: 0px;
        }

        smart-card smart-button button.smart-button {
            border-width: 0px;
            font-weight: bold;
            font-size: 14px;
            text-transform: uppercase;
        }

        smart-card smart-toggle-button button.smart-button {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-line-pack: center;
            align-content: center;
            -webkit-box-pack: center;
            -ms-flex-pack: center;
            justify-content: center;
            border-width: 0px;
            -webkit-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            transform: rotate(0deg);
            -webkit-transition: -webkit-transform 0.2s;
            transition: -webkit-transform 0.2s;
            -o-transition: transform 0.2s;
            transition: transform 0.2s;
            transition: transform 0.2s, -webkit-transform 0.2s;
        }

        smart-card smart-toggle-button[checked] button.smart-button {
            -webkit-transform: rotate(180deg);
            -ms-transform: rotate(180deg);
            transform: rotate(180deg);
            -webkit-transition: -webkit-transform 0.2s;
            transition: -webkit-transform 0.2s;
            -o-transition: transform 0.2s;
            transition: transform 0.2s;
            transition: transform 0.2s, -webkit-transform 0.2s;
        }
    </style>
    <h1 class="mat-dialog-title" mat-dialog-title="" id="mat-dialog-title-1">
        <mat-toolbar class="mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary">
            <mat-toolbar-row class="mat-toolbar-row">
                <smart-combo-box drop-down-position="bottom" selected-indexes=[0] label="Table" selection-mode="one" id="dz-select-table">
                </smart-combo-box>
                <span>資料管理</span>
                <span class="example-spacer"></span>
                <div id="toolbar-button"></div>
            </mat-toolbar-row>
        </mat-toolbar>
    </h1>
    <content>
        <div id="myGrid" style="height: 1200px; width:100%;" class="ag-theme-balham"></div>
    </content>
    `;
    }
}

// Register the element with the browser.
customElements.define('change-grid-new', changegridnew);