//抄东西用的
import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import { Dazzle } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';

import "https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-text-field/vaadin-email-field.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-text-field/vaadin-password-field.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-checkbox/vaadin-checkbox.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-select/vaadin-select.js";

class dzElm extends PolymerElement {
    static get properties() {
        return {

        };
    }

    constructor() {
        super();
        console.log("Created here:");
        this.userManager = new DataPackage('_user');
    }
    ready() {
        super.ready();
    }
    _register() {
        let shadow = this.shadowRoot;
        let that = this;
        this.tokManager = new DataPackage('token');

        let loc = location.search;
        loc = loc.substring(1);
        let key, token;
        [key, token] = loc.split("=");

        console.log("loc:", token);
        Dazzle.decryptToken(token).then(json => {
            that.verifyTok(json);
        });
        // this.tokManager.loadData(token).then(res => {
        //     this.verifyTok(res); //tok res
        // });
    }

    verifyTok(x) {
        //x = tok res
        let res = x;
        console.log("res:", res);

        let now = new Date().getTime();
        // console.log("now:", now);
        if (now > res['expireDate']) {
            alert("你的token過期了.");
            return;
        }

        if (res['action'] == "reset") {
            this.tokenJson = res;
            this.continueResetpw(res['email']);

        } else if (res['action'] == "register") {
            this.tokenJson = res;

            this.continueResetpw(res['email']);
        } else {
            alert("token 錯誤");
            return;
        }

    }

    continueResetpw(uid) {
        let shadow = this.shadowRoot;
        if (this.pass1 !== this.pass2) {
            alert('密碼不一樣，請重新輸入');
            return;
        }
        if (!this.pass1 || !this.pass2) {
            alert("請輸入密碼");
            return;
        }
        if (this.email !== uid) {
            alert('你輸入的電郵不符token之要求');
            return;
        }
        if (this.tokenJson['action'] === "reset")
            this.reset(this.pass1, this.email);
        else if (this.tokenJson['action'] === "register") {
            this.tokenJson['user']['password'] = this.pass1;
            this.userManager.saveDataWithCache(this.tokenJson['email'], this.tokenJson['user']).then(res => {
                alert('你已成功註冊');
                location.href = "/index.html";
            });

        }


    }

    reset(password, uid) {
        //change.dazzle.website/forget-password.html?token=24093129016
        let loc = location.search;
        let url =
            "https://0fnc1pmdce.execute-api.ap-northeast-1.amazonaws.com/default/changeMiscFc";

        let pram = {
            "action": "changeresetpassword",
            "uid": uid,
            "password": password
        };
        Dazzle.postData(url, pram).then(res => {
            console.log("res", res);
            if (res.code > 0) {
                alert("密碼已被成功更改,歡迎再次登入");
                location.href = "/index.html";
            }
        })
    }


    static get template() {
        // Template getter must return an instance of HTMLTemplateElement.
        // The html helper function makes this easy.
        return html `
        <style>
        * {
            color: black;
            font-family: sans-serif, Microsoft JhengHei;
        }
        :host {
            height:600px;
        }
        body {
            overflow: hidden;
        }

        #content {
            /* width: 100%; */
            height: 400px;
            margin: 0 auto;
            margin-top: 100px;
            max-width: 400px;
            background: white;
            padding: 20px;
        }

        h1 {
            margin-top: 20px;
            margin-bottom: 20px;
        }

        a {
            color: blue;
        }

        button.login-register {
            height: 40px;
            width: 100%;
            background-color: #F06C6C;
            font-size: 130%;
            color: white;
            border-radius: 3px;
            border: none;
        }
        .grid {
            display: grid;
            width: 100%;
            padding-bottom: 50px;
            grid-column-gap: 5px;
            grid-row-gap: 20px;
            grid-template-columns: repeat(1, 1fr);
            background-color: white;
        }
    </style>
    <div id="content">
        <div  class="grid">
            <!-- label="密碼"  -->
            <label>輸入電郵</label>
            <vaadin-text-field value="{{email}}"></vaadin-text-field>
            <label>新密碼</label>
            <vaadin-password-field id="pass1" value="{{pass1}}" class="padding-none" name="pass"
                error-message="Please enter a valid password" required clear-button-visible></vaadin-password-field>
            <label>確認密碼</label>
            <vaadin-password-field id="pass2" value="{{pass2}}" class="padding-none" name="confirmPass"
                error-message="Passwords do not match" required clear-button-visible></vaadin-password-field>

            <button on-click="_register" class=" login-register">更新密碼</button>
        </div>

    </div>
    `;
    }
}

// Register the element with the browser.
customElements.define('change-resetpw', dzElm);