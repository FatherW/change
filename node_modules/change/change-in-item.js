import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-button/vaadin-button.js';
import {Dazzle} from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';

import './change-things.js';
class dzElm extends PolymerElement {
  static get properties () {
    return {
        "data": {
            "type": Object
        },

        "allquery": {
            "type": Array

        },
        "countitem": {
            "type": Number
        },
        "storeviewcate": {
            "type": Array
        },

        "res": {
            "type": Array
        },
        "res2": {
            "type": Array
        },
        "query": {
            "type": Array
        },
        "searchParams": {
            "type": Object
        }



    };
  }

  constructor() {
    super();
    this.countitem = 0;
                this.from = 0;
                this.size = 8;
                this.keywords =[];
                this.categories=[];
                this.tags=[];
                this.districts =[];
                this.isNew =true;
                this.searchAll = true;
                this.minPrice = null;
                this.maxPrice = null;
                this.isFree = false;
                this.initMaxPrice = 0;
                let elm = document.head.querySelector('meta[name=user-id]') || null;
                if (elm) {
                    this.ownerId = elm.getAttribute('content');
                } else 
                    this.ownerId = null;

                
  }
  ready() {
      super.ready();

    // this.search();
    document.querySelector('#changeitemall').style.display = "none";
}
updateQuery(){
    this.categories = ["電子器材"];

}
async getMaxPrice(){
    console.log('Max Price');
    let that = this;
    let dbUrl = "https://search-dazzle-n4kjr6eecpjbne65ypunb42isu.ap-southeast-1.es.amazonaws.com/change.product/_search?size=0";
    let params = {
        "aggs" : {
            "max_price" : { "max" : { "field" : "price" } }
        }
    };
    await new Promise((resolve, reject) => {
        Dazzle.postData(dbUrl,params).then(res=>{
            console.log('Max Price',res);
            try {
               let max_price = res['aggregations']['max_price']['value']; 
               that.allMaxPrice = max_price;
               resolve(max_price);
            } catch(e){
                reject();
            }

        });              
    }); 
}
_search(){  
    console.log('Search');
    let that = this;
    let shadow = this.shadowRoot;
    let panel = shadow.querySelector('#blank');
    shadow.querySelector('.botbutton').style.display = 'block';
    let url = "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController";
    this.dbUrl = url;
    let must =[
                { "match": { "postStatus":   true  }},
                { "match": { "isFree": this.isFree }},
            ];
    // If fanspage, (i.e. has user-id) 
    if (this.ownerId)
        must.push({
            "match": {"ownerId": this.ownerId}
        });

    let filter=[];
    // this.tags =["裙"];
    // this.districts =["北區","南區"];

    // this.isNew =false;
    // this.isSecondHand = true;
    // this.minPrice = 0;
    // this.maxPrice = 200;

    // let filter = [];
    // let catArr =[];
    // let tagsArr =[];
    // let districtArr =[];

    if (this.keywords.length) {
        this.keywords.forEach(item=>{
            let json = {
                "wildcard": {
                    "productname": "*"+item+"*"
                }
            }
            filter.push(json);                    
        });

        
                
           
    }

    if (this.categories.length) {
            let json = {
                "terms": {"categories":this.categories}
            }
            filter.push(json);                    
    }
    
    if (this.tags.length) {
            let json = {
                "terms": {"tags":this.tags}
            }
            filter.push(json);                    
    }

    if (this.districts.length) {
            let json = {
                "terms": {"district":this.districts}
            }
            filter.push(json);                    
    }

    if (!this.searchAll) {
        let json = {"match":{"isNew": this.isNew} }
        filter.push(json);   
    }

    
    if (this.minPrice != null && this.maxPrice!=null) {
        
        let json = {
                "range": {
                    "price": {
                        "gte": this.minPrice,
                        "lte": this.maxPrice
                    }
                }
            }
        filter.push(json);
    }

    
    let query={
        "bool": { 
            "must": must,
            "filter": filter
        }
    }
    let searchParams = {
        "action": "searchData",
        "index": "change",
        "type": "product",
        "_source": "id,price",    
        "from":this.from,
        "size":this.size,
        "body": {
            "sort": [{
                "createTime": {
                    "order": "desc"
                }
            }],
            "query": query,
            "aggs": {
                "max_price": { "max": { "field": "price" } }
            }
        }
    };
    this.query = query;
    let shop = document.querySelector('change-shop');
    let list = shop.shadowRoot.querySelector('change-slidelist');
    // list.shadowRoot.querySelector('#renew').innerHTML = '<change-range></change-range>';
    panel.classList.remove('no-product');
    Dazzle.postData(url, searchParams).then(res => {
            console.log(res);
            // panel.classList.removeClass('loading');

            if (res.code>0){
               console.log('Resolve',JSON.stringify(searchParams));
                if (!res.resolve.length) {
                    if (that.from ===0) {
                        panel.classList.add('no-product');
                        panel.innerHTML = '';
                    } else 
                        that.from = 0;
                    // panel.innerHTML = "查無貨品";
                    that.initMaxPrice = 0;
                } else {
                    panel.classList.remove('no-product');
                    if (this.from ==0)
                        panel.innerHTML = '';

                    let price =that.initMaxPrice || 0;
                    let minPrice = that.minPrice || 0;
                    res.resolve.forEach(item=>{
                        let addi = document.createElement('change-things');
                        addi.setAttribute('id', item['id']);
                        panel.appendChild(addi);
                    
                        // for price range
                        if (item['price']> price)
                            price = item['price'];
                    });
                    that.initMaxPrice = price;



                   
                    // try{
                    //     list.shadowRoot.querySelector('change-range').setSlider(minPrice,that.initMaxPrice);
                    // } catch(e){

                    // }

                   
                }
            }

    });


}

removeTags(value){
    console.log('Remove District');
    let cIndex,tIndex,dIndex,kIndex,nIndex;
    let shadow = this.shadowRoot;
    cIndex = this.categories.indexOf(value);
    tIndex = this.tags.indexOf(value);
    dIndex = this.districts.indexOf(value);
    kIndex = this.keywords.indexOf(value);
    console.log('Remove District',dIndex,value,this.districts);

    if (cIndex>-1) 
        this.categories.splice(cIndex,1);
    else if (tIndex>-1) 
        this.tags.splice(tIndex,1);
    else if (dIndex>-1) 
        this.districts.splice(dIndex,1);
    else if (kIndex> -1)
        this.keywords.splice(dIndex,1);
    else {
        this.minPrice = null;
        this.maxPrice = null;
    } 
    if (value==="全新" || value==="二手" ) 
        this.searchAll = true;

    let panel = shadow.querySelector('#blank');
    panel.innerHTML = '';

    console.log('Search Tags',this.categories,this.tags,this.districts);
    this.from = 0;
    this._search();                    
}

displaymore() {


    let that = this;
    let shadow = this.shadowRoot;
    this.from = this.from + this.size;
    this._search();

}




_showMyGoods() {
    let shadow = this.shadowRoot;
    shadow.querySelector('#blank').innerHTML = "";
    let that = this;
    if (!this.query) {
        shadow.querySelector('#blank').innerHTML = "No products";
    } else {
        let goodsUrl = "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController";
        let params = {
            "action": "searchData",
            "index": "change",
            "type": "product",
            "_source": "_id",
            "body": {
                "sort": [{
                    "createTime": {
                        "order": "desc"
                    }
                }],
                "query": {
                    "bool": {
                        "must": this.query
                    }
                }
            }
        };
        Dazzle.postData(goodsUrl, params).then(res => {
            console.log("My Product", res);


            if (res.code > 0) {

                ////display change-in-item
                this.myProducts = res.resolve;
                let wrapper = that.shadowRoot.querySelector('.things-grid');
                wrapper.innerHTML = '';
                let x = that.myProducts.length;
                if (!x) {
                    // console.log("Check inside if");
                    shadow.querySelector('#blank').innerHTML = "沒有貨品";
                } else {
                    this.res = res.resolve;
                    let check8 = 8;
                    if (res.resolve.length < check8) {
                        check8 = res.resolve.length;
                    }
                    for (let i = 0; i < check8; i++) {
                        let productItem = document.createElement('change-things');
                        productItem.setAttribute("id", res.resolve[i]['_id']);

                        wrapper.appendChild(productItem);
                    }
                    this.countitem = 8;
                }

                ///display no reply
                if (this.getAttribute('id') == "mp") {
                    res.resolve.forEach(item => {
                        let counti = 0;
                        if (item.orderId > 0) {
                            counti++
                        };
                        shadow.querySelector('#change-user').innerHTML = '待回覆(' + counti + ')<div id="status"></div>';
                    })
                }


            } else {
                shadow.querySelector('#np').innerHTML = "No products";
                alert('服務器故障 Server error');
            }


        });
    }


}

displayitem(x) {
    let shadow = this.shadowRoot;
    shadow.querySelector('#blank').innerHTML = "";
    let that = this;
    let wrapper = that.shadowRoot.querySelector('.things-grid');

    if (x.length == 0 || x.length == undefined || x.length == null) {
        wrapper.innerHTML = "沒有貨品";
    } else {
        this.res = 0;
        this.res2 = x;
        let check8 = 8;
        if (x.length < check8) {
            check8 = x.length
        }
        for (let i = 0; i < check8; i++) {
            let productItem = document.createElement('change-things');
            productItem.setAttribute("id", x[i]);

            wrapper.appendChild(productItem);
        }
        this.countitem = 8;
    }


}

  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <style>
    * {
        font-family: sans-serif, 微軟正黑體;
    }
    .loading {
        background-image:url(https://www.gettv.hk/img/loading.svg);
    }

    .container {
        width: 100%;
        margin: 0 auto;
        display: table;
    }
    .svg {
        background-image: url('/img/loading.svg');
        position: relative;
        background-size: 30px;
        background-position: center center;
        background-repeat: no-repeat;
        width: 100%;

    }
    

    #status {
        width: 15px;
        height: 15px;
        background-color: rgb(241, 151, 55);
        border-radius: 100%;
        margin: 4px;
    }

    .things-grid {
        display: grid;
        grid-row-gap: 15px;
        padding: 0px 10px 20px 10px;
        grid-column-gap: 50px;
        grid-row-gap: 40px;
        grid-template-columns: repeat(4, 1fr);
        background-color: white;
        -webkit-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
        -moz-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
        box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
    }


    #morebutton:hover {
        cursor: pointer;
        color: gray;
        /* text-decoration: underline; */
    }

    #morebutton {
        /* align-items: center;
        border: 1px;
        width: 200px;
        height: 50px;
        font-size: 25px;
        display: block; */
    }

    .botbutton {
        display: block;
        text-align: center;
        margin: 0;
        background-color: white;
        grid-template-columns: repeat(3, 1fr);
        grid-column-gap: 75px;
        padding: 0px 50px 20px 50px;
        -webkit-box-shadow: 0px 4px 8px -1px rgba(50, 49, 56, 0.2);
        -moz-box-shadow: 0px 4px 8px -1px rgba(50, 49, 56, 0.2);
        box-shadow: 0px 4px 8px -1px rgba(50, 49, 56, 0.2);
    }


    .no-product{
        background-image:url(https://www.gettv.hk/img/noproduct.png);
        background-position:center;
        background-repeat:no-repeat;
        min-height:500px;
    }

    @media (max-width: 1292px) {
        .things-grid-middle-mobile {
            display: grid;
            height: 100%;
            grid-row-gap: 15px;
            grid-column-gap: 30px;
            grid-row-gap: 40px;
            grid-template-columns: repeat(3, 1fr);
            background-color: white;
            -webkit-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
            -moz-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
            box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
        }
    }

    /* @media (max-width: 940px) {
        .things-grid-small-mobile {
            display: grid;
            height: 100%;
            grid-row-gap: 15px;
            grid-column-gap: 30px;
            grid-row-gap: 40px;
            grid-template-columns: repeat(3, 1fr);
            background-color: white;
            -webkit-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
            -moz-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
            box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
        }

        .botbutton {
            display: block;
            padding-bottom: 10px;
            margin: 0;
        }
    } */

    @media only screen and (max-width: 768px) {
        .things-grid-small-mobile {
            display: grid;
            height: 100%;
            grid-row-gap: 15px;
            padding-bottom: 50px;
            grid-column-gap: 15px;
            grid-row-gap: 40px;
            grid-template-columns: repeat(2, 1fr);
            background-color: white;
            -webkit-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
            -moz-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
            box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
        }

        .botbutton {
            margin-bottom: 50px;
        }
        .svg {
            background-image: url('/img/loading.svg');
            position: relative;
            background-size: 30px;
            background-position: center center;
            background-repeat: no-repeat;
            width: 100%;

        }

    }
</style>



<div class="container">
    <div id="change-user" style="display: flex; margin: 10px;"></div>
    <div class="test" style="background-color: white;">
        <div class="things-grid things-grid-small-mobile things-grid-middle-mobile" id="blank"></div>
    </div>
    <div class="botbutton">
        <div style="display:inline-flex;">
            <vaadin-button id="morebutton" on-click="displaymore" style="cursor: pointer;">更多</vaadin-button>
        </div>
    </div>
</div>



    `;
  }
}

// Register the element with the browser.
customElements.define('change-in-item', dzElm);

