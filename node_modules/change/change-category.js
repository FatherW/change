import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-select/vaadin-select.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-menu-bar/vaadin-menu-bar.js';
import {Dazzle} from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';


class dzElm extends PolymerElement {
  static get properties () {
    return {
        "res": {
            "type": Array
        }
    };
  }

  constructor() {
    super();

  }
  ready() {
      super.ready();
      let that = this;
      let shadow = this.shadowRoot;

      customElements.whenDefined('vaadin-menu-bar').then(function() {
          const menu = shadow.querySelector('vaadin-menu-bar');
          menu.addEventListener('item-selected', function(e) {
              //Get ele value
              // shadow.querySelector('span').textContent = JSON.stringify(e.detail.value.text);
              shadow.querySelector('span').textContent = e.detail.value.text;
              Dazzle.dzFire('select-category', {
                  'detail': {
                      'category': e.detail.value.text
                  }
              });


          });

          let c = {};
          let arr = [];
          let g = [];
          let childarr = [];
          let url = "https://41khtanrje.execute-api.ap-northeast-1.amazonaws.com/prod/Dazzle-elasticSearchController";
          let params = {
              "action": "searchData",
              "index": "change",
              "type": "categories",
              "body": {
                  "sort": [{
                      "_id": {
                          "order": "asc"
                      }
                  }],
                  "query": {
                      "match_all": {}
                  }
              }
          };
          Dazzle.postData(url, params).then(res => {
              if (res.code > 0) {
                  let a = res.resolve;
                  let arrchild = [];

                  for (i = 0; i < a.length; i++) {
                      if (a[i].parent == 0) {
                          let b = a[i].name;
                          // generate childarr
                          for (let x = 0; x < a.length; x++) {
                              if (a[i].id == a[x].parent) {
                                  let j = a[x].name;
                                  let k = {
                                      "text": j
                                  };
                                  childarr.push(k);
                              }
                          }
                          let c = {
                              "text": b,
                              "children": childarr
                          };
                          arr.push(c);
                          childarr = [];


                          let id = a[i].id;
                      }

                  }
                  let h = {

                      text: 'Project',
                      children: [{
                          text: 'Users',
                          children: [{
                              text: 'List'
                          }, {
                              text: 'Add'
                          }]
                      }, {
                          text: 'Billing',
                          children: [{
                              text: 'Invoices'
                          }, {
                              text: 'Balance Events'
                          }]
                      }, ]
                  };

                  g.push(h);
                  //g 就是我们要的答案

              }

          });
          let i = [];
          let h = {
              text: '分類',
              children: arr
          };

          menu.items = [h];

      });

}

  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <style>
    * {
        font-family: sans-serif, 微軟正黑體;
    }

    :host {
        --lumo-contrast-10pct: hsla(0, 0%, 100%, 0);
        --lumo-body-text-color: #808080;
    }

    .container {
        display: flex;
    }

    vaadin-menu-bar::part(container) {
        margin-top: 15px;
    }
</style>
<div class="container">
    <vaadin-menu-bar class="cat"></vaadin-menu-bar>
    <div style="margin-top: 12px; display: inline-flex;">
        <p class="result"> : </p>
        <span style="margin-top: 12px; font-size: 16px;"></span>
    </div>

</div>
    `;
  }
}

// Register the element with the browser.
customElements.define('change-category', dzElm);

