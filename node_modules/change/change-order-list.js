<<<<<<< Updated upstream
import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import {Dazzle} from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';
import './change-message.js';
import './change-bar-things.js';
Dazzle.loadScript("/bower_components/crypto-js/crypto-js.js");


class dzElm extends PolymerElement {
  static get properties () {
    return {
        "id": {
            "type": String
        },
        "ownerId": {
            "type": String
        },
        "product": Object
    };
  }

  constructor() {
    super();
    this.dataManager = new DataPackage('order');
    this.userManager = new DataPackage('_user');
    this.orderManager = new DataPackage('order');
    this.prodManager = new DataPackage('product');

    this.user = store.get('change-user') || null;
    if (this.user) {
        this.fileManager = new AwsPackage(this.user);
    }
   this.isShow =false;
  }
  ready() {
      super.ready();
      this.id = this.getAttribute('id') ||null;
      let that = this;
      let shadow = this.shadowRoot;


      console.log('Order ID',this.id);
      this.orderManager.getDataByCache(this.id).then(res=>{
        //   this.order = res;
        //   console.log('Order',this.order);
        //   console.log('Buyer', this.order,res);
        //   this.ago = this.timeAgo(this.order['submitTime']);
        //   this.userManager.getDataByCache(this.order['buyerId']).then(buyer=>{
        //       this.buyer = buyer;
        //     });
        //   this.userManager.getDataByCache(this.order['sellerId']).then(seller=>{
        //       this.seller = seller;

        //   });
        //   this.prodManager.getDataByCache(this.order['productId']).then(product=>{
        //       this.product = product;
        //   });
        //   if (this.order.exchangeId) {
        //     this.prodManager.getDataByCache(this.order['exchangeId']).then(product=>{
        //         this.exchange = product;
        //     }); 
        //   }
        //   console.log('Is Show',this.user['id'],this.order['buyerId'],this.product['ownerId'],this.isShow);
        //   this.checkShow();

        this.loadData(res);

        //   this.shadowRoot.querySelector('change-user-tag').loadData(this.order['buyerId'],this.order['submitTime']);
          
      });

    
      this.prodManager.getDataByCache(this.pid).then(res=>{
          this.product = res;
          this.pRes = res;
      });

}
async loadData(res){
    this.order = res;
    console.log('Order',this.order);
    console.log('Buyer', this.order,res);
    this.ago = this.timeAgo(this.order['submitTime']);

    await this.userManager.getDataByCache(this.order['buyerId']).then(buyer=>{
        this.buyer = buyer;
      });
      console.log('Is Show',this.user['id'],this.order['buyerId'],this.product['ownerId'],this.isShow);

    await this.userManager.getDataByCache(this.order['sellerId']).then(seller=>{
        this.seller = seller;

    });
    console.log('Is Show',this.user['id'],this.order['buyerId'],this.product['ownerId'],this.isShow);

    await this.prodManager.getDataByCache(this.order['productId']).then(product=>{
        this.product = product;
    });
    console.log('Is Show',this.user['id'],this.order['buyerId'],this.product['ownerId'],this.isShow);

    if (this.order.exchangeId) {
      await this.prodManager.getDataByCache(this.order['exchangeId']).then(product=>{
          this.exchange = product;
      }); 
    }
    console.log('Is Show',this.user['id'],this.order['buyerId'],this.product['ownerId'],this.isShow);
    this.checkShow();
}
readOnly() {
    console.log('Read Only', this.product['ownerId'], this.user['id']);

    if (this.product['isPurchase'])
        return false;
    // if (this.order['status'] ==="接受求貨")
    //     return false;
    if (this.user.isAdmin)
        return true;

    if (this.product['ownerId'] != this.user['id'])
        return false;
    else
        return true;
}


checkShow(){
    console.log('Is Show Check',this.user['id'],this.order['buyerId'],this.product['ownerId'],this.isShow);

    try {
        if (this.user.isAdmin)
            this.isShow=true;
        if (this.user['id'] === this.order['buyerId'])
            this.isShow=true;
        
        if (this.user['id']=== this.product['ownerId'])
            this.isShow= true;
            console.log('Is Show Check',this.user['id'],this.order['buyerId'],this.product['ownerId'],this.isShow);

    } catch(e){
        console.log('Is Show',e);
        this.isShow = false;
    }


//    this.isShow =false;
}
isPermitted() {
    let user = store.get('change-user') || null;
    let buyerId = this.order['buyerId'] || null;
    let permitted = true;
    if (!user)
        permitted = false;

    if (user.isAdmin)
        permitted = true;
    if (this.product['ownerId'] === user['id'])
        return;

    if (user['id'] === buyerId)
        return;
    else
        this.remove();
    console.log('Fanspage', this.product['isFanpage']);
    // For fansPage admin permission
    // if (this.product['isFanpage'])
    //     checkFansAdmin();
}

accept() {
    let that = this;
    let shadow = this.shadowRoot;

    let content ='';
    console.log("accept this.order:", this.order);
    console.log("accept buyerId:", this.order['buyerId']);
    let dzPopup = document.createElement('change-message');
    dzPopup.dialog = shadow.querySelector('vaadin-dialog');    
    let msg = "確認後，其他買家請求將被清空. 是否確認此買家的要求？";
    let json;

    dzPopup.msg = msg;
    
    Dazzle.componentPopup(dzPopup,'500px','600px');
    dzPopup._confirm = function(e){
        //POSTDATA TO LAMBDA
// to, subject, content
        let subject = "賣家已經接受你的訂單-"+that.order['id'];
        // let to = that.seller['email'];
        console.log('Order',that.order,this.choice);
        if (that.order.exchangeId) {
            let choice = this.choice;
            if (choice==="exchange") {
                that.exchange['isPurchase'] =true;
                that.exchange['isExchange'] = false;                
                subject += "(交換貨品)";    
            } else {
                subject += "(免費送出)";    
                that.exchange['isExchange'] = false;                                
            }
            that.prodManager.saveDataWithCache(that.order.exchangeId,that.exchange);
        } 

            // Update Order and Product
            that.product['replyArray'] = [that.order['id']];
            that.product['isPurchase'] = true;
            that.prodManager.saveDataWithCache(that.product['id'],that.product);
            that.order['status'] = '接受求貨';
            console.log('Order',that.order);
            that.orderManager.saveDataWithCache(that.order['id'],that.order);
       
        json = {
            "email":that.seller['id'],
            "action":'ratings'
        }
        let token = Dazzle.encryptToken(json);
        let replyArr = [];
        Dazzle.getContent('/email-template/sendorderemail.html').then(html=>{
            console.log('Buyer',that.buyer,that.product);
            let pic = that.product['pics'][0];
            if (pic[0]=="/")
                pic = "https://www.gettv.hk"+pic;
                console.log('Pic',pic);
            content = html;
            content = content.replace('[[orderID]]',that.order['id']);
            content = content.replace('[[productName]]',that.product['productname']);
            content = content.replace('[[pic]]',pic);
            content = content.replace('[[sellerName]]',that.seller['username']);
            content = content.replace('[[district]]',that.product['district']);
            content = content.replace('[[price]]',that.product['price']);
            content = content.replace('[[deliveryMethod]]',that.product['deliveryMethod']);
            content = content.replace('[[deliveryMethod2]]',that.product['deliveryMethod']);
            content = content.replace('[[token]]',token);
            content = content.replace('[[sellerMsg]]',that.product['sellerMsg']);
            Dazzle.sendEmail(that.seller['email'], subject, content); 
            Dazzle.sendEmail(that.buyer['email'], subject, content); 
            Dazzle.sendEmail("henry@01power.net", subject, content); 
            Dazzle.sendEmail("gettv@gmail.com", subject, content); 
 
            alert('已接受求貨，買家及賣家均會收到訂單電郵');
            this.dialog.opened = false;

        });


   
    }



}

buyerinfo() {
    let alias = this.buyer.alias;
    window.open('/user/'+ alias);
}

reject() {
    let that = this;
    let shadow = this.shadowRoot;
    
    console.log("reject id:", this.id);
    console.log("accept product res:", this.product);
    
    let replyArray = this.product['replyArray'];
    
    let i = replyArray.indexOf(this.id);
    let exchangeId = replyArray[i];
    replyArray=replyArray.splice(i,1);
    this.prodManager.saveDataWithCache(this.product['id'],this.product).then(res=>{
        shadow.querySelector('#containall').remove();
    });
    console.log('Exchange ID',exchangeId);
    if (this.order.exchangeId) {
        this.exchange.isExchange = false;
        this.prodManager.saveDataWithCache(this.order.exchangeId,this.exchange);
    } 

    Dazzle.getContent('/email-template/rejectorderemail.html').then(html=>{
        console.log('Buyer',that.buyer,that.product);
        let pic = that.product['pics'][0];
        if (pic[0]=="/")
            pic = "https://www.gettv.hk"+pic;
            console.log('Pic',pic);
        content = html;
        content = content.replace('[[orderID]]',that.order['id']);
        content = content.replace('[[productName]]',that.product['productname']);
        content = content.replace('[[pic]]',pic);
        content = content.replace('[[sellerName]]',that.seller['username']);
        content = content.replace('[[district]]',that.product['district']);
        content = content.replace('[[price]]',that.product['price']);
        content = content.replace('[[deliveryMethod]]',that.product['deliveryMethod']);
        content = content.replace('[[deliveryMethod2]]',that.product['deliveryMethod']);
        content = content.replace('[[sellerMsg]]',that.product['sellerMsg']);

        Dazzle.sendEmail(that.seller['email'], subject, content); 
        Dazzle.sendEmail(that.buyer['email'], subject, content); 
//        Dazzle.sendEmail("henry@01power.net", subject, content); 
        Dazzle.sendEmail("gettv@gmail.com", subject, content); 
        // Update Order and Product
    });
    
}

timeAgo(time) {
    let str;
    let _thetimenow = Date.now();
    var comparetime = (_thetimenow - time) / 1000;
    if (comparetime < 60) {
        str = "剛剛"
    } else if (comparetime / 60 < 60) {
        str = Math.floor(comparetime / 60) + "分鐘前"
    } else if (comparetime / 60 / 60 < 24) {
        str = Math.floor(comparetime / 60 / 60) + "小時前"
    } else if (comparetime / 60 / 60 / 24 < 7) {
        str = Math.floor(comparetime / 60 / 60 / 24) + "日前"
    } else if (comparetime / 60 / 60 / 24 / 7 < 30) {
        str = Math.floor(comparetime / 60 / 60 / 24 / 7) + "星期前"
    } else if (comparetime / 60 / 60 / 24 / 7 / 30 < 365) {
        str = Math.floor(comparetime / 60 / 60 / 24 / 30) + "月前"
    }
    console.log('Time', time, str);
    return str;

}
  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <style>
            * {
                color: black;
                font-family: sans-serif;
            }

            .holder {
                width: 100%;
                border: 1px solid #ccc;
                height: auto;
                background-color: #F5F5F5;
                padding-top: 5px;
                padding-bottom: 5px;
                margin-bottom: 15px;
                margin-top: 20px;
                display: grid;
            }

            .orderInfo{
                display:grid;
                padding: 5px;
                grid-column-gap: 5px;
                grid-template-columns: repeat(3, 1fr);
            }

            #a1 {
                height: 50px;
                width: 50px;
                border-radius: 50%;
            }

            #a2 {
            }

            .in {
                display: inline;
                float: left;
                padding-left: 1.5%;
                padding-right: 1.5%;
            }

            .in img {
                width: 60px;
                margin-top: 5px;
            }

            .buttons {
                width: 30%;
            }

            button {
                width: 90%;
                margin-top: 15px;
                border: 1px solid #ccc;
                cursor: pointer;
                height: 35px;
                -webkit-box-shadow: 1px 0px 8px 0px rgba(50, 49, 56, 0.2);
                -moz-box-shadow: 1px 0px 8px 0px rgba(50, 49, 56, 0.2);
                box-shadow: 1px 0px 8px 0px rgba(50, 49, 56, 0.2)
            }
            #message{
                overflow: hidden;
                color: #1a1a1a;
                font-size: 15px;
                padding: 10px;
            }
            #info {
                background-color: white;
            }

            .accept {
                background-color:#F0846C;
                color: white;
            }

            .accept2 {
                background-color: #F0846C;
                color: white;
                display: none;
            }

            .reject {
                background-color: #4CAF50;
                color: white;
            }



            .reject2 {
                background-color: #4CAF50;
                color: white;
                display: none;
            }

            .pointer {
                cursor: pointer;
                border: none;
                background: #efefef;
                display: none;
            }

            @media only screen and (max-width: 1400px) {
                #info {
                    display: none;
                }

                .pointer {
                    display: block;
                }
            }

            @media (max-width: 667px) {
                .accept {
                    display: none;
                }

                .accept2 {
                    display: block;
                }

                .reject {
                    display: none;
                }

                .reject2 {
                    display: block;
                }

                button {
                    width: 100%;
                }
            }
            #purchase {
                background-color: red;
                width: 140px;
                height: 45px;
                border-radius: 3px;
                color: white;
                border: none;
                font-size: large;
                margin-top: 52px;
            }
        </style>

        <!-- INFO ON THE LEFT -->
        <!-- <template is="dom-if" if="[[permitted]]"> -->
            <vaadin-dialog></vaadin-dialog>
        <template is="dom-if" if="{{isShow}}">
        <div class="holder" id="containall">
            <template is="dom-if" if="{{order.exchangeId}}">
                <change-bar-things id$="{{order.exchangeId}}"></change-bar-things>
            </template>
            <div class="orderInfo">
                <change-user-tag id$="{{order.buyerId}}"></change-user-tag>
                <div id="a2" class="in">    
                    <!-- <div class="name">{{buyer.username}}</div>
                    <div id="time">{{ago}}</div> -->
                    <div id="message" style="overflow: hidden;">{{order.msg}}</div>
                </div>

                <!-- BUTTONS ON THE RIGHT -->
                <template is="dom-if" if="{{readOnly()}}">
                <div>
                    <div class="in buttons hide1">
                    <!--       <button id="info" on-click="buyerinfo">查看賣家信息</button>
                        <button class="pointer" style="background: #f0f0f0; border-color: black;" on-click="buyerinfo">
                            <svg class="search" viewBox="0 0 24 24" style="height: 15px;">
                                <title>Search Icon</title>
                                <path fill="#57585a"
                                    d="M15.618 17.032a9 9 0 1 1 1.414-1.414l5.675 5.675a1 1 0 0 1-1.414 1.414l-5.675-5.675zm-.701-2.05a1.017 1.017 0 0 1 .065-.065 7 7 0 1 0-.066.066z">
                                </path>
                            </svg>
                        </button>
                        -->
                    </div>
                    <div class="in buttons hide2">
                        <button class="accept" on-click="accept">接受</button>
                        <button class="accept2" on-click="accept">✔</button>
                    </div>
                    <div class="in buttons hide3">
                        <button class="reject" on-click="reject">拒絕</button>
                        <button class="reject2" on-click="reject">X</button>
                    </div>
                </div>
                </template>

                <template is="dom-if" if="{{product.isPurchase}}">

                <div class="in buttons hide2">
                    <button id="purchase">已接受</button>
                </div>

                </template>
            </div>
         



         </div>
         </template>

    `;
  }
}

// Register the element with the browser.
customElements.define('change-order-list', dzElm);

=======
import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import {Dazzle} from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';
import './change-message.js';
import './change-bar-things.js';
Dazzle.loadScript("/bower_components/crypto-js/crypto-js.js");


class dzElm extends PolymerElement {
  static get properties () {
    return {
        "id": {
            "type": String
        },
        "ownerId": {
            "type": String
        },
        "product": Object
    };
  }

  constructor() {
    super();
    this.dataManager = new DataPackage('order');
    this.userManager = new DataPackage('_user');
    this.orderManager = new DataPackage('order');
    this.prodManager = new DataPackage('product');

    this.user = store.get('change-user') || null;
    if (this.user) {
        this.fileManager = new AwsPackage(this.user);
    }

  }
  ready() {
      super.ready();
      this.id = this.getAttribute('id') ||null;
      let that = this;
      let shadow = this.shadowRoot;


      console.log('Order ID',this.id);
      this.orderManager.getDataByCache(this.id).then(res=>{
          this.order = res;
          console.log('Order',this.order);
          console.log('Buyer', this.order,res);
          this.ago = this.timeAgo(this.order['submitTime']);
          this.userManager.getDataByCache(this.order['buyerId']).then(buyer=>{
              this.buyer = buyer;
          });
          this.userManager.getDataByCache(this.order['sellerId']).then(seller=>{
              this.seller = seller;
          });
          this.prodManager.getDataByCache(this.order['productId']).then(product=>{
              this.product = product;
          });
          if (this.order.exchangeId) {
            this.prodManager.getDataByCache(this.order['exchangeId']).then(product=>{
                this.exchange = product;
            }); 
          }


          this.shadowRoot.querySelector('change-user-tag').loadData(this.order['buyerId'],this.order['submitTime']);
          
      });

    
      this.prodManager.getDataByCache(this.pid).then(res=>{
          this.product = res;
          this.pRes = res;
      });

}
readOnly() {
    console.log('Read Only', this.product['ownerId'], this.user['id']);

    if (this.product['isPurchase'])
        return false;
    // if (this.order['status'] ==="接受求貨")
    //     return false;
    if (this.user.isAdmin)
        return true;

    if (this.product['ownerId'] != this.user['id'])
        return false;
    else
        return true;
}


isShow(){
    if (this.user.isAdmin)
        return true;
    if (this.user['id'] == this.order['buyerId'])
        return true;
    
    if (this.user['id']== this.product['ownerId'])
        return true;

    return false;
}
isPermitted() {
    let user = store.get('change-user') || null;
    let buyerId = this.order['buyerId'] || null;
    let permitted = true;
    if (!user)
        permitted = false;

    if (user.isAdmin)
        permitted = true;
    if (this.product['ownerId'] === user['id'])
        return;

    if (user['id'] === buyerId)
        return;
    else
        this.remove();
    console.log('Fanspage', this.product['isFanpage']);
    // For fansPage admin permission
    // if (this.product['isFanpage'])
    //     checkFansAdmin();
}

accept() {
    let that = this;
    let shadow = this.shadowRoot;

    let content ='';
    console.log("accept this.order:", this.order);
    console.log("accept buyerId:", this.order['buyerId']);
    let dzPopup = document.createElement('change-message');
    dzPopup.dialog = shadow.querySelector('vaadin-dialog');    
    let msg = "確認後，其他買家請求將被清空. 是否確認此買家的要求？";
    let json;

    dzPopup.msg = msg;
    
    Dazzle.componentPopup(dzPopup,'500px','600px');
    dzPopup._confirm = function(e){
        //POSTDATA TO LAMBDA
// to, subject, content
        let subject = "賣家已經接受你的訂單-"+that.order['id'];
        // let to = that.seller['email'];
        console.log('Order',that.order,this.choice);
        if (that.order.exchangeId) {
            let choice = this.choice;
            if (choice==="exchange") {
                that.exchange['isPurchase'] =true;
                that.exchange['isExchange'] = false;                
                subject += "(交換貨品)";    
            } else {
                subject += "(免費送出)";    
                that.exchange['isExchange'] = false;                                
            }
            that.prodManager.saveDataWithCache(that.order.exchangeId,that.exchange);
        } 

            // Update Order and Product
            that.product['replyArray'] = [that.order['id']];
            that.product['isPurchase'] = true;
            that.prodManager.saveDataWithCache(that.product['id'],that.product);
            that.order['status'] = '接受求貨';
            console.log('Order',that.order);
            that.orderManager.saveDataWithCache(that.order['id'],that.order);
       
        json = {
            "email":that.seller['id'],
            "action":'ratings'
        }
        let token = Dazzle.encryptToken(json);
        let replyArr = [];
        Dazzle.getContent('/email-template/sendorderemail.html').then(html=>{
            console.log('Buyer',that.buyer,that.product);
            let pic = that.product['pics'][0];
            if (pic[0]=="/")
                pic = "https://www.gettv.hk"+pic;
                console.log('Pic',pic);
            content = html;
            content = content.replace('[[orderID]]',that.order['id']);
            content = content.replace('[[productName]]',that.product['productname']);
            content = content.replace('[[pic]]',pic);
            content = content.replace('[[sellerName]]',that.seller['username']);
            content = content.replace('[[district]]',that.product['district']);
            content = content.replace('[[price]]',that.product['price']);
            content = content.replace('[[deliveryMethod]]',that.product['deliveryMethod']);
            content = content.replace('[[deliveryMethod2]]',that.product['deliveryMethod']);
            content = content.replace('[[token]]',token);
            content = content.replace('[[sellerMsg]]',that.product['sellerMsg']);
            Dazzle.sendEmail(that.seller['email'], subject, content); 
            Dazzle.sendEmail(that.buyer['email'], subject, content); 
            Dazzle.sendEmail("henry@01power.net", subject, content); 
            Dazzle.sendEmail("gettv@gmail.com", subject, content); 
 
            alert('已接受求貨，買家及賣家均會收到訂單電郵');
            this.dialog.opened = false;

        });


   
    }



}

buyerinfo() {
    let alias = this.buyer.alias;
    window.open('/user/'+ alias);
}

reject() {
    let that = this;
    let shadow = this.shadowRoot;
    
    console.log("reject id:", this.id);
    console.log("accept product res:", this.product);
    
    let replyArray = this.product['replyArray'];
    
    let i = replyArray.indexOf(this.id);
    let exchangeId = replyArray[i];
    replyArray=replyArray.splice(i,1);
    this.prodManager.saveDataWithCache(this.product['id'],this.product).then(res=>{
        shadow.querySelector('#containall').remove();
    });
    console.log('Exchange ID',exchangeId);
    if (this.order.exchangeId) {
        this.exchange.isExchange = false;
        this.prodManager.saveDataWithCache(this.order.exchangeId,this.exchange);
    } 

    Dazzle.getContent('/email-template/rejectorderemail.html').then(html=>{
        console.log('Buyer',that.buyer,that.product);
        let pic = that.product['pics'][0];
        if (pic[0]=="/")
            pic = "https://www.gettv.hk"+pic;
            console.log('Pic',pic);
        content = html;
        content = content.replace('[[orderID]]',that.order['id']);
        content = content.replace('[[productName]]',that.product['productname']);
        content = content.replace('[[pic]]',pic);
        content = content.replace('[[sellerName]]',that.seller['username']);
        content = content.replace('[[district]]',that.product['district']);
        content = content.replace('[[price]]',that.product['price']);
        content = content.replace('[[deliveryMethod]]',that.product['deliveryMethod']);
        content = content.replace('[[deliveryMethod2]]',that.product['deliveryMethod']);
        content = content.replace('[[sellerMsg]]',that.product['sellerMsg']);

        Dazzle.sendEmail(that.seller['email'], subject, content); 
        Dazzle.sendEmail(that.buyer['email'], subject, content); 
//        Dazzle.sendEmail("henry@01power.net", subject, content); 
        Dazzle.sendEmail("gettv@gmail.com", subject, content); 
        // Update Order and Product
    });
    
}

timeAgo(time) {
    let str;
    let _thetimenow = Date.now();
    var comparetime = (_thetimenow - time) / 1000;
    if (comparetime < 60) {
        str = "剛剛"
    } else if (comparetime / 60 < 60) {
        str = Math.floor(comparetime / 60) + "分鐘前"
    } else if (comparetime / 60 / 60 < 24) {
        str = Math.floor(comparetime / 60 / 60) + "小時前"
    } else if (comparetime / 60 / 60 / 24 < 7) {
        str = Math.floor(comparetime / 60 / 60 / 24) + "日前"
    } else if (comparetime / 60 / 60 / 24 / 7 < 30) {
        str = Math.floor(comparetime / 60 / 60 / 24 / 7) + "星期前"
    } else if (comparetime / 60 / 60 / 24 / 7 / 30 < 365) {
        str = Math.floor(comparetime / 60 / 60 / 24 / 30) + "月前"
    }
    console.log('Time', time, str);
    return str;

}
  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <style>
            * {
                color: black;
                font-family: sans-serif;
            }

            .holder {
                width: 100%;
                border: 1px solid #ccc;
                height: auto;
                background-color: #F5F5F5;
                padding-top: 5px;
                padding-bottom: 5px;
                margin-bottom: 15px;
                margin-top: 20px;
                display: grid;
            }

            .orderInfo{
                display:grid;
                padding: 5px;
                grid-column-gap: 5px;
                grid-template-columns: repeat(3, 1fr);
            }

            #a1 {
                height: 50px;
                width: 50px;
                border-radius: 50%;
            }

            #a2 {
            }

            .in {
                display: inline;
                float: left;
                padding-left: 1.5%;
                padding-right: 1.5%;
            }

            .in img {
                width: 60px;
                margin-top: 5px;
            }

            .buttons {
                width: 30%;
            }

            button {
                width: 90%;
                margin-top: 15px;
                border: 1px solid #ccc;
                cursor: pointer;
                height: 35px;
                -webkit-box-shadow: 1px 0px 8px 0px rgba(50, 49, 56, 0.2);
                -moz-box-shadow: 1px 0px 8px 0px rgba(50, 49, 56, 0.2);
                box-shadow: 1px 0px 8px 0px rgba(50, 49, 56, 0.2)
            }
            #message{
                overflow: hidden;
                color: #1a1a1a;
                font-size: 15px;
                padding: 10px;
            }
            #info {
                background-color: white;
            }

            .accept {
                background-color:#F0846C;
                color: white;
            }

            .accept2 {
                background-color: #F0846C;
                color: white;
                display: none;
            }

            .reject {
                background-color: #4CAF50;
                color: white;
            }



            .reject2 {
                background-color: #4CAF50;
                color: white;
                display: none;
            }

            .pointer {
                cursor: pointer;
                border: none;
                background: #efefef;
                display: none;
            }

            @media only screen and (max-width: 1400px) {
                #info {
                    display: none;
                }

                .pointer {
                    display: block;
                }
            }

            @media (max-width: 667px) {
                .accept {
                    display: none;
                }

                .accept2 {
                    display: block;
                }

                .reject {
                    display: none;
                }

                .reject2 {
                    display: block;
                }

                button {
                    width: 100%;
                }
            }
            #purchase {
                background-color: red;
                width: 140px;
                height: 45px;
                border-radius: 3px;
                color: white;
                border: none;
                font-size: large;
                margin-top: 52px;
            }
        </style>

        <!-- INFO ON THE LEFT -->
        <!-- <template is="dom-if" if="[[permitted]]"> -->
            <vaadin-dialog></vaadin-dialog>
        <template is="dom-if" if="{{isShow()}}">
        <div class="holder" id="containall">
            <template is="dom-if" if="{{order.exchangeId}}">
                <change-bar-things id$="{{order.exchangeId}}"></change-bar-things>
            </template>
            <div class="orderInfo">
                <change-user-tag id$="{{order.buyerId}}"></change-user-tag>
                <div id="a2" class="in">    
                    <!-- <div class="name">{{buyer.username}}</div>
                    <div id="time">{{ago}}</div> -->
                    <div id="message" style="overflow: hidden;">{{order.msg}}</div>
                </div>

                <!-- BUTTONS ON THE RIGHT -->
                <template is="dom-if" if="{{readOnly()}}">
                <div>
                    <div class="in buttons hide1">
                    <!--       <button id="info" on-click="buyerinfo">查看賣家信息</button>
                        <button class="pointer" style="background: #f0f0f0; border-color: black;" on-click="buyerinfo">
                            <svg class="search" viewBox="0 0 24 24" style="height: 15px;">
                                <title>Search Icon</title>
                                <path fill="#57585a"
                                    d="M15.618 17.032a9 9 0 1 1 1.414-1.414l5.675 5.675a1 1 0 0 1-1.414 1.414l-5.675-5.675zm-.701-2.05a1.017 1.017 0 0 1 .065-.065 7 7 0 1 0-.066.066z">
                                </path>
                            </svg>
                        </button>
                        -->
                    </div>
                    <div class="in buttons hide2">
                        <button class="accept" on-click="accept">接受</button>
                        <button class="accept2" on-click="accept">✔</button>
                    </div>
                    <div class="in buttons hide3">
                        <button class="reject" on-click="reject">拒絕</button>
                        <button class="reject2" on-click="reject">X</button>
                    </div>
                </div>
                </template>

                <template is="dom-if" if="{{product.isPurchase}}">

                <div class="in buttons hide2">
                    <button id="purchase">已接受</button>
                </div>

                </template>
            </div>
         



         </div>
         </template>

    `;
  }
}

// Register the element with the browser.
customElements.define('change-order-list', dzElm);

>>>>>>> Stashed changes
