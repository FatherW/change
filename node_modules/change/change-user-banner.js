<<<<<<< Updated upstream
import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import {Dazzle} from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';

import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/css/main-style.js';


class dzElm extends PolymerElement {
  static get properties () {
    return {
        "id": {
            'type': String
        },
        "createStr": {
            "type": String
        }
    };
  }

  ready() {
      super.ready();
      let that = this;
      let shadow = this.shadowRoot;                
  

}

regTime() {
    console.log('TIme',Dazzle.parseTime(this.user['createTime']));
    this.createStr = Dazzle.parseTime(this.user['createTime']);
}
constructor() {
    super();
    let shadow = this.shadowRoot;
    this.bigPic = "http://change.dazzle.website.s3.amazonaws.com/files/1/1591944377549.jpeg";
    this.pics = [];
    this.pics[0] = this.bigPic;
    console.log("Created Add Product");
    this.dataManager = new DataPackage('product');
    this.userManager = new DataPackage("_user");

    let user = store.get('change-user') || null;
    let elm = document.head.querySelector('meta[name=user-id]');
    let id;
    if (elm)
        id = elm.getAttribute('content');
    else if (user)
        id = user['id'];
    else {
        // alert('用戶未登入或不能讀取用戶資料');
        location.href="/index.html";
    }




    document.addEventListener('upload-success', e => {
        let src = e.detail['Key'];
        this.curElm.setAttribute('src', src);
    });

    document.addEventListener('select-image', e => {
        let Key = e.detail['Key'];
        let type = this.curElm.getAttribute('type') || 'banner';
        if (type === 'banner') {
            this.curElm.style.backgroundImage = 'url(' + Key + ')';
        } else {
            this.curElm.setAttribute('src', Key);
        }
        this.getAllPics();
        this.closeDialog();
    });
}


getAllPics() {
    let shadow = this.shadowRoot;
    this.pics = [];
    shadow.querySelectorAll('.productImg').forEach(item => {
        let src = item.style.backgroundImage;
        src = src.replace('url(', '').replace(')', '').replace(/\"/gi, "");
        console.log('Src', src);
        this.pics.push(src);
    });
}


closeDialog() {
    // let dialog = shadow.querySelector('vaadin-dialog');
    this.dialog.opened = false;
}


  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <slot></slot>
    `;
  }
}

// Register the element with the browser.
customElements.define('change-user-banner', dzElm);

=======
import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import {Dazzle} from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';

import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/css/main-style.js';


class dzElm extends PolymerElement {
  static get properties () {
    return {
        "id": {
            'type': String
        },
        "createStr": {
            "type": String
        }
    };
  }

  ready() {
      super.ready();
      let that = this;
      let shadow = this.shadowRoot;                
  

}

regTime() {
    console.log('TIme',Dazzle.parseTime(this.user['createTime']));
    this.createStr = Dazzle.parseTime(this.user['createTime']);
}
constructor() {
    super();
    let shadow = this.shadowRoot;
    this.bigPic = "http://change.dazzle.website.s3.amazonaws.com/files/1/1591944377549.jpeg";
    this.pics = [];
    this.pics[0] = this.bigPic;
    console.log("Created Add Product");
    this.dataManager = new DataPackage('product');
    this.userManager = new DataPackage("_user");

    let user = store.get('change-user') || null;
    let elm = document.head.querySelector('meta[name=user-id]');
    let id;
    if (elm)
        id = elm.getAttribute('content');
    else if (user)
        id = user['id'];
    else {
        // alert('用戶未登入或不能讀取用戶資料');
        location.href="/index.html";
    }




    document.addEventListener('upload-success', e => {
        let src = e.detail['Key'];
        this.curElm.setAttribute('src', src);
    });

    document.addEventListener('select-image', e => {
        let Key = e.detail['Key'];
        let type = this.curElm.getAttribute('type') || 'banner';
        if (type === 'banner') {
            this.curElm.style.backgroundImage = 'url(' + Key + ')';
        } else {
            this.curElm.setAttribute('src', Key);
        }
        this.getAllPics();
        this.closeDialog();
    });
}


getAllPics() {
    let shadow = this.shadowRoot;
    this.pics = [];
    shadow.querySelectorAll('.productImg').forEach(item => {
        let src = item.style.backgroundImage;
        src = src.replace('url(', '').replace(')', '').replace(/\"/gi, "");
        console.log('Src', src);
        this.pics.push(src);
    });
}


closeDialog() {
    // let dialog = shadow.querySelector('vaadin-dialog');
    this.dialog.opened = false;
}


  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <slot></slot>
    `;
  }
}

// Register the element with the browser.
customElements.define('change-user-banner', dzElm);

>>>>>>> Stashed changes
