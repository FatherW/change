<<<<<<< Updated upstream
import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import { Dazzle } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-menu/css/style.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-dazzle/dz-block.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-file-management/dz-image-toolbar.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-file-management/css/style.js";
import "./change-dropzone-file.js";

class changegallery extends PolymerElement {
    static get properties() {
        return {

        };
    }

    constructor() {
        super();
        let user = store.get('change-user');
        this.user = user;
        console.log('Drop Zone2', user);
        Dazzle.fileManager = new AwsPackage(user);
        this.fileManager = Dazzle.fileManager;
    }

    ready() {
        super.ready();
        this.renew();
    }

    _uploadFile(e) {
        console.log('upload', e);
        let shadow = this.shadowRoot;
        let that = this;
        this.pics = [];
        let dialog = shadow.querySelector('vaadin-dialog');
        this.dialog = dialog;
        this.curElm = e.path[0];
        // Dazzle.popup(dialog, "change", "change-dropzone-file", "60%", "50%");
        Dazzle.popup(dialog, 'change', 'change-dropzone-file', '60%', '50%');
        // console.log('saved', bucket)
    }

    renew() {
        let that = this;
        let shadow = this.shadowRoot;

        that.fileManager.listFile('files/' + this.user['email'] + '/').then(res => {
            console.log('Result', that.user['email'], res);
            let h3 = document.createElement('h3');
            let img = document.createElement('img');
            let div = document.createElement('div');
            let elm, elm2;
            let type;
            let src;
            let figure = document.createElement('div');
            figure.setAttribute('class', 'brick');

            shadow.querySelector('#dz-imageList').innerHTML = '';
            res.forEach(item => {

                type = that.fileType(item['Key']);
                console.log('Type', item, type);

                switch (type) {

                    case 'image':
                        src = '/' + item['Key'];
                        elm = figure.cloneNode(true);
                        elm2 = img.cloneNode(true);
                        elm2.setAttribute('src', src);
                        elm2.addEventListener('click', e => {
                            that.select('/' + item['Key']);
                        });
                        // let figcaption = document.createElement('figcaption');
                        let toolbar = document.createElement('dz-image-toolbar');
                        toolbar.key = item['Key'];
                        // figcaption.innerHTML = item['Key'];
                        elm.appendChild(elm2);
                        // elm.appendChild(toolbar);

                        console.log('Elm', elm);
                        shadow.querySelector('#dz-imageList').appendChild(elm);

                        break;
                }


            });
        });
    }
    fileType(Key) {
        let ext = "file";
        if (Key.indexOf('.') > -1)
            ext = Key.substr(Key.lastIndexOf('.') + 1);

        switch (ext) {
            case 'jpg':
            case 'jpeg':
            case 'png':
            case 'gif':
                return 'image';
                break;

            default:
                return 'file';
                break;
        }

        return 'file';
    }
    select(Key) {
        Dazzle.dzFire('select-image', { 'detail': { 'Key': Key } });

        // Dazzle.closeDialog();
    }
    static get template() {
        // Template getter must return an instance of HTMLTemplateElement.
        // The html helper function makes this easy.
        return html `
        <style include="main-styles"></style>
		<style include="labs-styles"></style>
        <style include="masonry-styles"></style>
        
        
        <style>
 
        </style>
        <style include="icon-styles"></style>
        <h1 class="mat-dialog-title" mat-dialog-title="" id="mat-dialog-title-1">
            <mat-toolbar class="mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary">
            <mat-toolbar-row class="mat-toolbar-row">
                <span>媒體庫</span>
                <span class="example-spacer"></span>
                <vaadin-button class="primary raised" id="dz-upload" on-click="_uploadFile">上載</vaadin-button>
                <vaadin-button id="dz-refresh" on-click="renew">更新</vaadin-button>
            </mat-toolbar-row>
        </mat-toolbar></h1>
        <div  id="dz-imageList" class="masonry bordered">

        </div>
        <vaadin-dialog></vaadin-dialog>
    `;
    }
}

// Register the element with the browser.
=======
import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import { Dazzle } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-menu/css/style.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-dazzle/dz-block.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-file-management/dz-image-toolbar.js";
import "https://d25k6mzsu7mq5l.cloudfront.net/bower_components/dz-file-management/css/style.js";
import "./change-dropzone-file.js";

class changegallery extends PolymerElement {
    static get properties() {
        return {

        };
    }

    constructor() {
        super();
        let user = store.get('change-user');
        this.user = user;
        console.log('Drop Zone2', user);
        Dazzle.fileManager = new AwsPackage(user);
        this.fileManager = Dazzle.fileManager;
    }

    ready() {
        super.ready();
        this.renew();
    }

    _uploadFile(e) {
        console.log('upload', e);
        let shadow = this.shadowRoot;
        let that = this;
        this.pics = [];
        let dialog = shadow.querySelector('vaadin-dialog');
        this.dialog = dialog;
        this.curElm = e.path[0];
        // Dazzle.popup(dialog, "change", "change-dropzone-file", "60%", "50%");
        Dazzle.popup(dialog, 'change', 'change-dropzone-file', '60%', '50%');
        // console.log('saved', bucket)
    }

    renew() {
        let that = this;
        let shadow = this.shadowRoot;

        that.fileManager.listFile('files/' + this.user['email'] + '/').then(res => {
            console.log('Result', that.user['email'], res);
            let h3 = document.createElement('h3');
            let img = document.createElement('img');
            let div = document.createElement('div');
            let elm, elm2;
            let type;
            let src;
            let figure = document.createElement('div');
            figure.setAttribute('class', 'brick');

            shadow.querySelector('#dz-imageList').innerHTML = '';
            res.forEach(item => {

                type = that.fileType(item['Key']);
                console.log('Type', item, type);

                switch (type) {

                    case 'image':
                        src = '/' + item['Key'];
                        elm = figure.cloneNode(true);
                        elm2 = img.cloneNode(true);
                        elm2.setAttribute('src', src);
                        elm2.addEventListener('click', e => {
                            that.select('/' + item['Key']);
                        });
                        // let figcaption = document.createElement('figcaption');
                        let toolbar = document.createElement('dz-image-toolbar');
                        toolbar.key = item['Key'];
                        // figcaption.innerHTML = item['Key'];
                        elm.appendChild(elm2);
                        // elm.appendChild(toolbar);

                        console.log('Elm', elm);
                        shadow.querySelector('#dz-imageList').appendChild(elm);

                        break;
                }


            });
        });
    }
    fileType(Key) {
        let ext = "file";
        if (Key.indexOf('.') > -1)
            ext = Key.substr(Key.lastIndexOf('.') + 1);

        switch (ext) {
            case 'jpg':
            case 'jpeg':
            case 'png':
            case 'gif':
                return 'image';
                break;

            default:
                return 'file';
                break;
        }

        return 'file';
    }
    select(Key) {
        Dazzle.dzFire('select-image', { 'detail': { 'Key': Key } });

        // Dazzle.closeDialog();
    }
    static get template() {
        // Template getter must return an instance of HTMLTemplateElement.
        // The html helper function makes this easy.
        return html `
        <style include="main-styles"></style>
		<style include="labs-styles"></style>
        <style include="masonry-styles"></style>
        
        
        <style>
 
        </style>
        <style include="icon-styles"></style>
        <h1 class="mat-dialog-title" mat-dialog-title="" id="mat-dialog-title-1">
            <mat-toolbar class="mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary">
            <mat-toolbar-row class="mat-toolbar-row">
                <span>媒體庫</span>
                <span class="example-spacer"></span>
                <vaadin-button class="primary raised" id="dz-upload" on-click="_uploadFile">上載</vaadin-button>
                <vaadin-button id="dz-refresh" on-click="renew">更新</vaadin-button>
            </mat-toolbar-row>
        </mat-toolbar></h1>
        <div  id="dz-imageList" class="masonry bordered">

        </div>
        <vaadin-dialog></vaadin-dialog>
    `;
    }
}

// Register the element with the browser.
>>>>>>> Stashed changes
customElements.define('change-gallery', changegallery);