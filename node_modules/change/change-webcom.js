import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import {Dazzle} from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';

import "https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-text-field/vaadin-text-area.js";
Dazzle.loadScript("/bower_components/crypto-js/crypto-js.js");
import './change-add-product.js';
import './change-bar-things.js';

class dzElm extends PolymerElement {
  static get properties () {
    return {
        seller: Object,
        product: Object
    };
  }

  constructor() {
    super();
    this.exchangeId = null;
    this.user = store.get('change-user') || null;
    if (this.user) {
        this.fileManager = new AwsPackage(this.user);
        this.userManager = new DataPackage('_user');
        this.prodManager = new DataPackage('product');
        this.orderManager = new DataPackage('order');
        console.log('this.product', this.product);
        console.log('this.prodManager', this.prodManager);
    }
//    this.msg = '';


  }
  ready() {
      super.ready();
      let that = this;
        this.dialog = this.shadowRoot.querySelector('vaadin-dialog');
       
      let shadow = this.shadowRoot;
      this.userManager.getDataByCache(this.product['ownerId']).then(user=>{
          this.seller = user;
          shadow.querySelector('#_changeicon').src = this.seller['head'];
          shadow.querySelector('#owner').innerHTML = this.seller['username'];
          shadow.querySelector('#time').innerHTML += this.seller['score']; + '( ' +
          this.seller['numberRate'] + ' )';
      });
      shadow.querySelector('#para').innerHTML = this.product['description'];

      shadow.querySelector('#review').addEventListener("keypress", function(e) {
          var key = e.which || e.keyCode || 0;
          if (key === 13) {
              that._postRequest();
          }
      });

      let cfmDialog = shadow.querySelector('#back');
      cfmDialog.addEventListener("click", (e) => {
          console.log("close button is working");

          // closing pop-up
          var event = new CustomEvent('close-item-dialog', {});
          document.dispatchEvent(event);

      });

      document.addEventListener('select-product',e=>{

         let cfm = confirm('注意! 被選的貨品的求貨申請會被清空，貨品會設定為下架。此貨品亦不能再用作出售或其他交換。是否確認?');

         if (cfm){
            let id = e.detail.id;
            let selected= this.shadowRoot.querySelector('#selected');
            let item = document.createElement('change-bar-things');
            item.setAttribute('id',id);

            this.prodManager.getDataByCache(id).then(res=>{
                try {
                    if (res.replyArray.length===0) {
                        selected.innerHTML = '<h6>交換貨品</h6>';
                        selected.appendChild(item);        
                        this.exchangeId = id;
                    } else {
                        let cfm2 = confirm('你選擇的貨品，有人在請求中，要清空嗎?');
                        if (cfm2) 
                            this.rejectAllOrder(id);
                    }
                } catch(e){
                    selected.innerHTML = '<h6>交換貨品</h6>';
                    selected.appendChild(item);        
                    this.exchangeId = id;
                }
            });




//            Dazzle.dzFire('close-item-dialog',{});
         } 
    });
      // this.saveOrder();
      // this.orderManager.getAllData().then(res=>{
      //     console.log('Order',res);
      // });


}

rejectAllOrder(id){
    this.prodManager.getDataByCache(id).then(exchange=>{
        let arr = exchange['replyArray'];
        arr.forEach(item=>{
            this.orderManager.getDataByCache(item).then(order=>{
                let exchangeId = order.exchangeId;
                if (exchangeId)
                    this.prodManager.getDataByCache(exchangeId).then(prod=>{
                        prod['isExchange'] = false;
                        this.prodManager.saveDataWithCache(exchangeId,prod);
                    });
                this.sendRejectMail(order);
                // send cancel email
            });
        });
        exchange['replyArray'] =[];
        exchange['postStatus'] = false;
        exchange['isExchange'] = true;
        this.prodManager.saveDataWithCache(id,exchange);        
    });
}



sendRejectMail(order) {

    let subject = "對不起！你的求貨請求不成功。賣家已取消你的請求。(訂單號碼:"+order['id']+")";
    Dazzle.getContent('/email-template/rejectorderemail.html').then(html=>{
        this.prodManager.getDataByCache(order.productId).then(product=>{
            this.userManager.getDataByCache(order.buyerId).then(buyer=>{
                this.userManager.getDataByCache(order.sellerId).then(seller=>{

                    let pic = roduct['pics'][0];
                    if (pic[0]=="/")
                        pic = "https://www.gettv.hk"+pic;
                        console.log('Pic',pic);
                    content = html;
                    content = content.replace('[[orderID]]',order['id']);
                    content = content.replace('[[productName]]',product['productname']);
                    content = content.replace('[[pic]]',pic);
                    content = content.replace('[[sellerName]]',seller['username']);
                    content = content.replace('[[district]]',product['district']);
                    content = content.replace('[[price]]',product['price']);
                    content = content.replace('[[deliveryMethod]]',product['deliveryMethod']);
                    content = content.replace('[[deliveryMethod2]]',product['deliveryMethod']);
                    content = content.replace('[[sellerMsg]]',product['sellerMsg']);
            
                    Dazzle.sendEmail(that.buyer['email'], subject, content); 
            //        Dazzle.sendEmail("henry@01power.net", subject, content); 
                    Dazzle.sendEmail("gettv@gmail.com", subject, content); 


                });
            });
        });

        // Update Order and Product
    });
    
    
    

}
_postRequest() {
    console.log('点击了送出按钮');
    let shadow = this.shadowRoot;
    
    let msg = shadow.querySelector('#review').value;
    let id = Date.now();

    let buyer = store.get("change-user") || null;
    let contactinfo = shadow.querySelector('#review').value;

    //For testing get SELLER properties from new-product
    // let k = document.querySelector('change-new-product').SELLER;
    // console.log("omgomg:", k);

    if (buyer == null) {
        alert("請先登入");
    } else {
        // this.fileManager = new Awspackage(buyer);

        // Henry's Code
        console.log("omgomg:", JSON.stringify(this.product));
        let pid = this.product['id'];
        let sid = this.seller['id'];
        let to = this.seller['email'];
        let html;

        if (this.product['isNew']) {
            var status = "https://www.gettv.hk/img/icon/new-10.png";
        } else {
            var status = "https://www.gettv.hk/img/icon/second-hand-11.png";
        }
        console.log("status:", status);

        let image = this.product['pics'][0];
        let productname = this.product['productname'];
        let sellerImage = this.seller['head'];
        console.log("seller head:", sellerImage);
        let sellerName = this.seller['username'];
        let price = this.product['price'];
        let district = this.product['district'];
        let deliveryMethod = this.product['deliveryMethod'];
        let deliveryMethod2 = this.product['deliveryMethod'];

        //GENERATE REG TOK
        var tok = Date.now();
        // console.log("tok:", tok);
        var expireDate = tok + 604800000; //604800000 = 1 week time in milliseconds
        // console.log("expireDate:", expireDate);

        // this.contactToken(tok, to, expireDate, pid);
        let id = this.generateToken(15);
        // this.encryptData(id);
        let json = {
            "order":this.order,
            "seller":this.seller,
            "buyer": this.user,
            "product":this.product,
            "createTime": new Date().getTime()
        }
        let token = Dazzle.encryptToken(json);

        this.saveOrder();
        console.log('Seller Image',sellerImage);
        Dazzle.getContent('/email-template/sendcontactemail.html').then(html => {
            if (image[0]==="/")
                image = "https://www.gettv.hk" + image;
            if (sellerImage[0]==="/")
                sellerImage = "https://www.gettv.hk" + sellerImage;

            html = html.replace("[[image]]", image);
            html = html.replace("[[status]]", status);
            html = html.replace("[[productname]]", productname);
            html = html.replace("[[sellerImage]]", sellerImage);
            html = html.replace("[[sellerName]]", sellerName);
            html = html.replace("[[price]]", price);
            html = html.replace("[[district]]", district);
            html = html.replace("[[deliveryMethod]]", deliveryMethod);
            html = html.replace("[[deliveryMethod2]]", deliveryMethod);
            html = html.replace("[[contactinfo]]", contactinfo);
            html = html.replace("[[token]]", token);

            console.log("html:", token);
            Dazzle.sendEmail( to, '你有新的訊息', html);
            // Dazzle.sendEmail("henry@01power.net", '你有新的訊息', html);
            this.dialog.opened = false;
            alert('電郵已發出');
        });

    }
}

generateToken(length) {
        var result           = '';
        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for ( var i = 0; i < length; i++ ) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
}

saveOrder() {
    console.log("SAVEOEDER");
    let arr = this.product['replyArray'];
    let that = this;
    console.log("arr", arr);
    if (!arr)
        arr = [];
    if (!this.product['replyArray'])
        this.product['replyArray'] =[];
    let id = 'order-' + this.product['id'] + '-' + arr.length;
    let msg = this.shadowRoot.querySelector('#review').value;
    let json = {
        "buyerId": this.user['id'],
        "productId": this.product['id'],
        "sellerId": this.product['ownerId'],
        "id": id,
        "msg": msg,
        "submitTime": new Date().getTime(),
        "status":"求貨中",
        "exchangeId": this.exchangeId  
    };
    this.orderManager.saveDataWithCache(id, json);
    this.product['replyArray'].push(id);
    this.prodManager.saveDataWithCache(this.product['id'], this.product);
    this.prodManager.getDataByCache(this.exchangeId).then(res=>{
        res.isExchange = true;
        res.postStatus = false;
        console.log('Save Exchange',res);
        that.prodManager.saveDataWithCache(this.exchangeId,res);
    });
}
async generateNewId(){
    let no = new Date().getTime() % 10000;
    let str; 
    let that = this;

        let res = await that.fileManager.listFile('product/');
        await console.log('Model',res);
    
    // return await new Promise(function(resolve, reject) {
    //     that.fileManager.listFile('product/').then(res=>{
    //         resolve(String(no) + String(res.length +1));
    //     });
    // });

}

async _upload(){

//    Dazzle.loadChangeComponent('change','change-add-product');
    let no = new Date().getTime() % 10000;
    let dzPopup = document.createElement('change-add-product');
    dzPopup.dialog = this.dialog;
    dzPopup.isFan = false;
    dzPopup.owner = this.user['id'];
//    dzPopup.product = null;
    let model = Dazzle.getProductModel();
    let res = await this.fileManager.listFile('product/');
    model['id'] = String(no) + String(res.length +1);
    model['isFree'] = true;
    model['ownerId'] = this.user['id'];
    console.log('Model',model);
    dzPopup.product = model;
    Dazzle.componentPopup(dzPopup,'95%','95%');


}


_select(){

    //    Dazzle.loadChangeComponent('change','change-add-product');
      
  

        let dzPopup = document.createElement('change-in-item');
        dzPopup.dialog = this.dialog;
        dzPopup.isFree = true;
        dzPopup.postStatus = null;
        dzPopup.ownerId = this.user['id'];
        dzPopup.isSelection = true;
        Dazzle.componentPopup(dzPopup,'95%','95%');
        dzPopup._search();
    
    }
  static get template () {
    // Template getter must return an instance of HTMLTemplateElement.
    // The html helper function makes this easy.
    return html`
    <style>
            * {
                color: black;
                font-family: sans-serif, Microsoft JhengHei;
            }

            body {
                overflow: hidden;
            }

            #deleteall {
                align-items: center;
                text-align: justify;
                padding-left: 5%;
                padding-right: 5%;
                font-family: sans-serif;
                font-family: Microsoft JhengHei;
                overflow: hidden;
            }

            #_changeicon {
                width: 90px;
                border-radius: 100%;
                height:90px;
            }

            #para {
                color: black;
                font-size: 1rem;
                padding: 15px;
                top: 63px;
                left: 8px;
                color: black;
            }

            #review {
                height: 100px;
                width: 100%;

            }

            #click-button {
                background-color: #4CAF50;
                border: none;
                color: white;
                text-decoration: none;
                display: inline-block;
                font-size: 14px;
                cursor: pointer;
                padding-top: 3%;
                width: 100%;
                text-align: center;
                padding-bottom: 3%;

            }

            #a1 {
                float: left;
                padding: 3%;
            }

            #a2 {
                font-size: 15px;
                padding-top: 5%;
            }

            #time {
                font-size: 24px;
                color: black;
                font-weight: 550;
            }

            #usericon {
                height: 100px;
                margin-bottom: 12px;
                margin-top: 12px;
                border-radius: 6px;
                padding-top: 3px;
                padding-bottom: 3px;
                width: 100%;
            }

            #owner {
                font-size: 20px;
                font-weight: bold;
            }

            .free-grid {
                display: grid;
                grid-row-gap: 5px;
                padding: 0px 10px 20px 10px;
                grid-column-gap: 5px;
                grid-template-columns: repeat(2, 1fr);
                background-color: white;
                -webkit-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
                -moz-box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
                box-shadow: 0px -4px 8px 0px rgba(50, 49, 56, 0.2);
            }
            .free-grid vaadin-button#upload{
                background-color:#F0846C;
                color:white;
            }

            .free-grid vaadin-button#select{
                background-color:#4CAF50;
                color:white;
            }
            #msg,#selected{
                grid-column: 1 / span 2;
            }

        </style>
        <vaadin-dialog></vaadin-dialog>
        <div id="deleteall">

            <div style="float: right;">
                <button id="back"
                    style="border: none; background-color: white; margin-top: 10px; font-size: 15px; cursor: pointer; position: absolute; margin-left: 20px;">X</button>
            </div>
            <div id="usericon">
                <div id="a1">
                    <img id="_changeicon" src={{seller.head}}>
                </div>
                <div id="a2">
                    <div class="name" id="owner">{{seller.username}}</div>
                    <div id="time">評分/人數:{{seller.score}}/{{seller.numberRate}}</div>
                </div>
            </div>
            <br>
            <template is="dom-if" if="{{product.isFree}}" id="freeBlock">
                <div class="free-grid">
                    <blockquote id="msg">
                        <p>由於此貨品屬於免費區，閣下需要揀選一件你已上載的免費區貨品，以作交換。此貨品不應是出售中或已出售的貨品.</p>
                        <p>若對方選取你為交易者，雙方的貨品均會列為「送出」。若否，貨品會自動回復原來狀態。當然你也可專門上載一件貨品以作交換</p>
                    </blockquote>
                    <vaadin-button id="upload" on-click="_upload">上載貨品</vaadin-button>
                    <vaadin-button id="select" on-click="_select">選取貨品</vaadin-button>
                    <div id="selected"></div>
                </div>
            </template>

            <div id='para'>
                {{product.description}}
            </div>
            <vaadin-text-area id="review" placeholder="留言給賣家"></vaadin-text-area>
            <button id="click-button" on-click="_postRequest">送出</button>
        </div>
    `;
  }
}

// Register the element with the browser.
customElements.define('change-webcom', dzElm);
