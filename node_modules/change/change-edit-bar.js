import { PolymerElement, html } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@polymer/polymer/polymer-element.js';
import 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@vaadin/vaadin-dialog/vaadin-dialog.js';
import { Dazzle } from 'https://d25k6mzsu7mq5l.cloudfront.net/node_modules/@dazzle/dz-dazzle/dz-library.js';
import './change-status.js';


class dzElm extends PolymerElement {
    static get properties() {
        return {
            "id": {
                "type": String
            },
            "valueArray": {
                "type": Array
            }
        };
    }

    constructor() {
        super();
        this.user = store.get('change-user') || null;
        if (this.user) {
            this.fileManager = new AwsPackage(this.user);
            this.generateNewId();
        }

        this.dataManager = new DataPackage('_user');
        this.prodManager = new DataPackage('product');
        this.isEdit = true;

    }
    ready() {
        super.ready();
        let shadow = this.shadowRoot;
        let that = this;
        let loc = location.search;
        let pid = "";
        let uid = "";
        let posit = 0;
        if(window.location.hash)
            pid = window.location.hash.substring(1);
        else
            pid = document.head.querySelector('meta[name=product-id]').getAttribute('content');
        // pid = document.head.querySelector('meta[name=product-id]').getAttribute('content') || null;

        let user = store.get('change-user') || null;
        this.id = pid;

        this.shadowRoot.querySelector('change-status').id = this.id;
        this.prodManager.getDataByCache(pid).then(res => {
            this.product = res;
            console.log('PID',pid,this.product);

            this.reAlias();
            this.isShow(user, res);

            this.dataManager.getDataByCache(res['ownerId']).then(res2 => {
                console.log('Admin', res2);
            });
        });

        this.dialog = this.shadowRoot.querySelector('vaadin-dialog');
        console.log('Created dialog', this.dialog);

        console.log("Edit Bar ID", pid);
        //Check whether login or not (not login -> hide)


    }
    isShow(user, product) {
        try {
            let ownerId = product['ownerId'];

            if (user.isAdmin)
                this.isEdit = true;
            else if (user.id == ownerId)
                this.isEdit = true;
            else {
                let userId = String(user.id);

                this.dataManager.getDataByCache(ownerId).then(res => {
                        console.log('Admin', res, res.isFanpage, res.fansAdmin.indexOf(userId), userId);
                        if (res.isFanpage && res.fansAdmin.indexOf(userId) > -1)
                            this.isEdit = true;
                        else
                            this.isEdit = false;

                    },
                    err => {
                        console.log('Admin false');
                        this.isEdit = false;
                    });
            }

        } catch (e) {
            this.isEdit = false;
        }

        console.log('Is show edit bar', this.isEdit);

        /*
                if (user)
                    if(res.ownerId == user['id'] || user.isAdmin == true){
                        shadow.querySelector('#tbar').style.display = "block";
                    }

                    */
    }
    generateNewId() {
        let no = new Date().getTime() % 10000;
        let str;
        this.fileManager.listFile('product/').then(res => {
            this.newId = String(no) + String(res.length + 1);
        });
    }

    reAlias() {
        let alias = this.product['productname'];
        alias = alias.replace(/^\s+|\s+$/gm, '')
        alias = alias.replace(/ /gm, '-');
        alias = alias.replace(/\//gm, '-');

        this.prodManager.matchData({ "productname": this.product['productname'] }).then(res => {
            if (res.length > 1)
                this.product['alias'] = alias + res.length;
            else
                this.product['alias'] = alias;

            console.log('Change Alias');
        });
    }

    _edit() {
        let user = Dazzle.subUser;

        // store.set('new-product-id',this.id); 
        Dazzle.loadChangeComponent('change', 'change-add-product');

        let product = this.product;
        store.set('new-product-id', product['id']);
        let dzPopup = document.createElement('change-add-product');
        dzPopup.product = this.product;
        dzPopup.dialog = this.dialog;
        Dazzle.componentPopup(dzPopup, '95%', '95%');

        // store.set('new-product',product);
        // location.replace("/add-product.html");

    }
    _delete() {
        //GET USER ID
        let user = store.get("change-user") || null;
        let tempid = user['_id'];

        this.prodManager.removeData(this.id).then(res => {
            console.log("check:", res.code);
            if (res.code > 0) {
                //alert("STATUS: DELETE SUCCESSFUL");

                alert('已刪除貨品');
                location.replace("/index.html");
            } else {
                alert("不能刪除貨品");
            }
        });

    }

    _copy() {

        //GENERATE UNIQUE TIME AS PRODUCT ID
        let a = Date.now();
        let user = Dazzle.subUser;


        let product = this.product;


        product['id'] = this.newId;
        product['ownerId'] = user['id'];
        product['postStatus'] = false;
        store.set('new-product-id', product['id']);
        this.prodManager.saveDataWithCache(product['id'], product);


        // store.set('new-product-id',this.id); 
        Dazzle.loadChangeComponent('change', 'change-add-product');

        // let product = this.product;
        // store.set('new-product-id',product['id']);

        let dzPopup = document.createElement('change-add-product');
        dzPopup.dialog = this.dialog;
        dzPopup.product = product;
        Dazzle.componentPopup(dzPopup, '95%', '95%');



        // store.set('new-product',product);
        // location.replace("/add-product.html");



    }

    savejson(x, y, z) {
        let that = this;
        let user = store.get('change-user') || null;
        this.fileManager = new AwsPackage(user);

        // console.log("omg1:", x);
        // console.log("omg2:", y);
        // console.log("omg3:", z);

        this.fileManager.saveFile('json/product-' + y + '.json', JSON.stringify(x)).then(res => {
            location.replace("./add-product.html?p" + y + "u" + z);
            // console.log("save copy JSON success!");
        });

    }
    static get template() {
        // Template getter must return an instance of HTMLTemplateElement.
        // The html helper function makes this easy.
        return html `
        <style include="main-style"></style>
        <style>
        * {
            color: black;
            font-family: sans-serif, Microsoft JhengHei;
        }

        header {
            background-image: url(./img/background/3.jpg);
            padding-top: 30px;
        }

        #tbar {
            display:block;
            background: #F0F0F0;
            width: 92.5%;
            margin: 0 auto;
            border: 1px solid #ccc;
            padding: 30px 0;
        }

        .containerB {
            display: flex;
            width: 90%;
            margin: 0 auto;
            justify-content: space-between;
        }

        #edit {
            width: 100px;
            height: 35px;
            border: 1px solid #ccc;
            background-color: white;
            margin-right: 50px;
        }

        button {
            cursor: pointer;
            font-family: sans-serif, Microsoft JhengHei;
            font-size: 15px;
            width: 100px;
            height: 35px;
        }

        .buttonL {
            display: flex;
        }

        #copy {
            background-color: grey;
            border: none;
            color: white;
        }

        #delete {
            background-color: grey;
            border: none;
            color: white;
            margin-left: 50px;
        }

        @media only screen and (max-width: 992px) {}

        @media only screen and (max-width: 640px) {
            #edit {
                width: 60px;
                margin-right: 10px;
                border: none;
            }

            .buttonR button {
                width: 60px;
            }

            #delete {
                margin-left: 10px;
            }
        }
    </style>
    <vaadin-dialog></vaadin-dialog>
    <template is="dom-if" if="{{isEdit}}">
        <header>
            <div id="tbar">
                <div class="containerB">
                    <div class="buttonL">
                        <button id="edit" on-click="_edit">編輯</button>
                        <change-status></change-status>
                    </div>

                    <div class="buttonR">
                        <button id="copy" on-click="_copy">複製</button>
                        <button id="delete" on-click="_delete">刪除</button>
                    </div>
                </div>
            </div>
        </header>
        </template>
    `;
    }
}

// Register the element with the browser.
customElements.define('change-edit-bar', dzElm);